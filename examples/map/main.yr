import core.io;


struct (K, V)
| key : K
| value : V
| left : p!(MapEntry!(K, V))
| right : p!(MapEntry!(K, V))
 -> MapEntry;

struct (K, V)
| entry : p!(MapEntry!(K, V))
 -> Map;


def alloc (T) (a : T) {
    extern (C) GC_malloc (size : ulong) -> p!void;
    let x = cast!(p!T) (GC_malloc (16UL));
    *x = a;
    return x;
}


def map (K, V) () {
    return Map!(K, V) {null};
}

def find (K, V) (ref mp : p!(MapEntry!(K, V)), key : const K) -> ref V {
    if mp is null {
        let copy = key;
        mp = alloc (MapEntry!(K, V) {copy, V::init, null, null});
        return (*mp).value;
    } else if ((*mp).key == key) return (*mp).value;
    else if ((*mp).key < key)  return find ((*mp).left, key);
    else return find ((*mp).right, key);
}

def opIndex (K, V) (ref map : Map!(K, V), key : const K) -> ref V {
    return find (map.entry, key);
}

def print (K, V) (const map : p!(MapEntry!(K, V)), padd : int) {
    if map !is null {

        for it in 0 .. padd {
            if (it % 4 == 0)
                print ('|');
            else print (' ');
        }
        print ("| ");
        println (((*map).key, " : ", (*map).value));

        if (*map).left !is null {
            print ((*map).left, padd + 4);            
        } else {
            for it in 0 .. padd {
                if (it % 4 == 0)
                    print ('|');
                else print (' ');
            }
            println ("|   \\_");
        }
        
        if (*map).right !is null {
            print ((*map).right, padd + 4);
        } else {
            for it in 0 .. padd {
                if (it % 4 == 0)
                    print ('|');
                else print (' ');
            }
            println ("|   \\_");
        }

    }
}

def print (K, V) (const map : Map!(K, V)) {
    print (map.entry, 0); 
}

struct
| a : int
| b : int
 -> Test;

def opEquals (const left : Test, const right : Test) {
    return left.a == right.a && left.b == right.b;
}

def opTest ("<") (const left : Test, const right : Test) {
    return  left.b < right.b ||  left.a < right.b;
}

def main () {
    let a = map!(Test, int) ();
    for it in 0 .. 10 {
        a [Test {it, 10 - it}] = it;
    }
    println (a);
}
