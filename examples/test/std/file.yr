import std.string;
import core.io;

struct
| d_ino : ulong
| d_off : ulong
| d_reclen : ushort
| d_type : ubyte
| d_name : [char ; 256U]
 -> dirent;

extern (C) readdir (const a : p!void) -> p!dirent;
extern (C) opendir (const a : p!char) -> p!void;
extern (C) closedir (a : p!void);

def isDir (const name : string) -> bool {
    let dir = opendir (name.ptr);
    if (dir !is null) {
	closedir (dir);
	return true;
    } else return false;
}

def dirEntries (const path : string) -> [string] {
    let dir = opendir (path.ptr);
    let res = [string ; 0UL];
    if (dir !is null) {
        let entry = readdir (dir);
        while (entry !is null) {
	    let name = ((*entry).d_name.ptr).fromStringZ ();
	    if ((*entry).d_type == 4)
	        res = res ~ [name ~ "/"];
	    else res = res ~ [name];
	    entry = readdir (dir);
        }
        closedir (dir);
    }
    return res;
}

def tree (const path, dec) -> void {
    let res = dirEntries (path);
    for (it in 0UL .. res.len) {
	if (res [it] != "../" && res [it] != "./" && res [it] != ".git/") {
            for (_it in 0 .. dec) {
	        if (_it % 4 == 0) print ('|');
	        print (' ');                
            }

	    println (("|-", res [it]));
	    if (isDir (path ~ res [it])) {
                tree (path ~ res [it], dec + 4);	    
            }
        }
    }
}

