mod core.string;
import core.abort;

def opEquals (const left : string, const right : string) -> bool {
    if left.len != right.len
        return false;
    
    for it in 0UL .. left.len {
        if left [it] != right [it]
            return false;
    }
    return true;
}

def opTest (op : string) (const left : string, const right : string) -> int {
    let min = left.len;
    if right.len < min {
        min = right.len;
    }
    
    for it in 0U .. min {    
        if left [it] != right [it] {
            if left [it] < right [it]  return -1;
            else return 1;
        }
    }
    
    return 0;
}

def opIndex (T) (ref a : string, i : r!(T)) -> [char] {
    if i.scd >= i.fst && (i.scd - i.fst) <= a.len && i.fst <= a.len {
        return [char] {cast!ulong (i.scd - i.fst), a.ptr + i.fst};
    } else {
        abort ();
        return [char] {0UL, null};
    }
}

def opBinary ("~") (const a : [char], const b : string) -> ref [char] {
    return cast![char] (cast!string (a) ~ b);   
}

def opAssign ("=") (const a : [char], const b : string) -> [char] {
    if a.len != b.len {
        println (("Array lengths don't match for copy: ", a.len, " != ", b.len));
        abort ();
    }

    for it in 0U .. a.len {
        a [it] = b [it];
    }
    
    return a;
}

def opAssign ("=") (a : const [char], const b : [char]) -> [char] {
    if a.len != b.len {
        println (("Array lengths don't match for copy: ", a.len, " != ", b.len));
        abort ();
    }

    for it in 0U .. a.len {
        a [it] = b [it];
    }
    
    return a;
}

def dup (str : const string) {
    let res = [char ; str.len];
    for it in 0U .. res.len {
        res [it] = str [it];
    }
    return string {res.len, res.ptr};
}
