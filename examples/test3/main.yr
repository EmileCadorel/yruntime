import core.io;

struct (T)
| head : p! (Node!T)
 -> List;

struct (T)
| value : T
| next : p!(Node! T)
 -> Node;


def alloc (T) (a : T) {
    extern (C) GC_malloc (size : ulong) -> p!void;
    let x = cast!(p!T) (GC_malloc (16UL));
    *x = a;
    return x;
}

def append (T) (ref current : p!(Node!T), b : T) {
    match current {
        null => current = alloc (Node!T {b, null});
        _ => append ((*current).next, b);
    }
}

def append (T) (ref a : List!T, const b : T) 
    append (a.head, b);


def printNode (T) (const a : p!(Node!T)) {
    match *a {
        Node!T {value, null} => {
            print (value);
        }
        Node!T {value, next} => {
            print (value);
            print ("::");
            printNode (next);
        }
    }    
}

def print (T) (a : List!T) {
    if (a.head !is null)
        printNode (a.head);
    else print ("Empty");
}


def main () {
    let a = List!int {null};
    a.append (10);
    a.append (134);
    println (a);
}
