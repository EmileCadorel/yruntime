import core.io;

struct (T)
| value : T
| next : p!(List!T)
 -> List;

def alloc (T) (a : T) {
    extern (C) GC_malloc (size : ulong) -> p!void;
    let x = cast!(p!T) (GC_malloc (16UL));
    *x = a;
    return x;
}

def append (T) (ref a : List!T, const b : T) {
    let current = &a;
    while current !is null {
        if ((*current).next is null) {
            (*current).next = alloc (List!T {b, null});
            return;
        }
        current = (*current).next;
    }       
}

def printList (T) (ref a : List!T) {
    let current = &a;
    while current !is null {
        print ((*current).value);
        print (" :: ");
        current = (*current).next;
    }
    println ("NIL");
}

def main () {
    let a = List!string {"salut", null};
    for i in 1 .. 10
        a.append ("test");
    a.printList ();
}
