import core.io;

// struct sockaddr_in {
//    uint8_t         sin_len;       /* longueur totale      */
//    sa_family_t     sin_family;    /* famille : AF_INET     */
//    in_port_t       sin_port;      /* le numéro de port    */
//    struct in_addr  sin_addr;      /* l'adresse internet   */
//    unsigned char   sin_zero[8];   /* un champ de 8 zéros  */
// };

// struct sockaddr {
//    unsigned char   sa_len;         /* longueur totale */
//    sa_family_t     sa_family;      /* famille d'adresse */
//    char            sa_data[14];    /* valeur de l'adresse*/
// };

/* TODO : complete this enum by using socket.h */
enum
| AfInet : 2/* Internet IP Protocol */
 -> AddrFamily;

/* TODO : complete this enum by using socket.h */
enum
| SockStream : 1 /* stream (connection) socket) */
 -> SocketType;

enum
| InvalidSocket : -1
 -> SockResCode;

struct
| sa_len : u8
| sa_family : p!void
| sa_data : [char ; 14U]
 -> Sockaddr;

// struct in_addr {
//    in_addr_ts_addr;
// };

// struct hostent {
//    char    *h_name;       /* Nom officiel de l'hôte.   */
//    char   **h_aliases;    /* Liste d'alias.            */
//    int      h_addrtype;   /* Type d'adresse de l'hôte. */
//    int      h_length;     /* Longueur de l'adresse.    */
//    char   **h_addr_list;  /* Liste d'adresses.         */
// }

extern (C) socket (addrFamily : i32, socketType : i32, protocol : i32) -> i32;
extern (C) close (fd : i32) -> i32;
extern (C) recv (s : i32, buf : p!void, len : i32, flags : u32) -> i32;
extern (C) listen (s : i32, backlog : i32) -> i32;
extern (C) bind (sockfd : i32, my_addr : p!Sockaddr, addrlen : u32) -> i32;
extern (C) accept (sock : i32, addr : p!Sockaddr, addlrn : u32) -> i32;

def main()
{
    let sock = socket (AddrFamily::AfInet, SocketType::SockStream, 0);
    if (sock == SockResCode::InvalidSocket)
    {
        println("Error while creating the socket.");
        return -1;
    }
    close (sock);
    return 0;
}
