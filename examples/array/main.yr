import core.io;

extern (C) printf (const c : p!char, ...);

struct
| a : [int; 3U]
 -> Test;

struct (T)
| len : ulong
| ptr : p!T
 -> slice;

def print (T, I : ulong) (const a : [T ; I]) {
    print ("[");
    for it in 0U .. a.len {
        print (a [it]);
        if it < a.len - 1U
            print (", ");
    }
    print ("]");
}

def print (T) (const a : p!(const T)) {
    printf ("%x".ptr, a);
}

def opIndex (T, I : ulong) (ref a : [T ; I], i : r!(int)) -> mut slice!T {
    if (i.scd >= i.fst && i.scd - i.fst < a.len && i.fst < a.len) {
        return slice!(T) {cast!ulong (i.scd - i.fst), &a [i.fst]};
    } else {
        return slice!T {0U, null};
    }
}

def opIndex (T, I) (ref a : slice!(T), i : I) -> ref T {
    return *(a.ptr + (T::sizeof * cast!ulong (i)));
}

def opAssign ("=", T) (a : slice!(T), b : const [const T]) {
    if (a.len == b.len) {
        for it in 0U .. a.len {
            a [it] = b [it];
        }
    }
}

def print (T) (const a : slice!T) {
    let i = 0U;
    print ('[');
    while i < a.len {
        print (a [i]);
        if i < a.len - 1U
            print (", ");
        i = i + 1U;
    }
    print (']');
}




def main (args) {
    let a = [int ; imut 10U];
    a [0 .. 3] = [1, 2, 3];
    println (a);
}

