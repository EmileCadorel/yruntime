import std.memory;

private mod inner {
    struct (T)
    | value : T
    | next : p!(inner::Node!(T))
     -> Node;
}


public struct (T)
| head : p!(inner::Node!T)
 -> List;


def list(T) ()-> List!T {
    return List!T {null};
}

def push (T) (ref a : List!T, b : T) {
    if (a.head is null) {
        a.head = alloc (inner::Node!T {b, null});        
    } else {
        let current = a.head;
        while current !is null {
            if ((*current).next is null) {
                (*current).next = alloc (inner::Node!T {b, null});
                return;
            }
            current = (*current).next;
        }
    }
}

def pop (T) (ref a : List!T) -> T {
    let current = a.head;
    if (a.head is null) {
        return T::init;
    } else {        
        while current !is null {
            if ((*current).next !is null) {
                if ((*(*current).next).next is null) {
                    let value = (*(*current).next).value;
                    (*current).next = null;
                    return value;
                }
            }        
            current = (*current).next;
        }
        
        let value = (*a.head).value;
        a.head = null;
        return value;
    }    
}

def back (T) (ref list : List!T) -> T {
    let current = list.head;
    while current !is null {
        if current.next !is null {
            current = current.next;
        } else return current.value;
    }
    assert (false);
}

def empty (T) (ref list : List!T) {
    return list.head is null;
}

def next (T) (ref list : List!T) -> mut p!(inner::Node!T) {
    return list.head;
}

def next (T) (nodePtr : p!(inner::Node!T)) -> mut p!(inner::Node!T) {
    if (nodePtr is null)
        return null;
    return (*nodePtr).next;
}

def print (T) (const a : List!T) {
    let current = a.head;
    while current !is null {
        print ("[");
        print ((*current).value);
        print ("]::");
        current = (*current).next;
    }
    print ("NIL");
}

def @inline opIter (1, T) (ref list : List!T) {
    return listIter::It!T { list.head };
}

def @inline get (0, T) (a : listIter::It!T) -> ref T {
    return a.val.value;
}

def @inline isEnd (T) (a : listIter::It!T) {
    return a.val is null;
}

def @inline next (T) (ref a : listIter::It!T) {
    a = listIter::It!T { a.val.next };
}

private mod listIter {
    
    struct (T)
    | val : p!(inner::Node!T)
     -> It;
    
}
