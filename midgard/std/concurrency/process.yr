mod std::concurrency::process;
import std::collection::vec;
import std::io;

import core::typeinfo;
import core::exception;
import std::stream;
import std::concurrency::pipe;
import etc::c::stdio;

extern (C) def dup2 (stream : i32, type : u32)-> i32;
extern (C) def _yrt_print_error (format : &(c8), ...);
extern (C) def fork ()-> u32;
extern (C) def execvp (cmd : &c8, args : &(&c8))-> i32;
extern (C) def _yrt_exit (i : i32);
extern (C) def waitpid (pid : u32, dmut status : &i32, ig : i32);
extern (C) def chdir (path : &c8)-> i32;

pub class @final SubProcess {

    let cmd : [c8];
    
    let args : [[c8]];

    let cwd : [c8];
    
    let mut pid : u32 = 0u32;

    let dmut _stdin = IOPipe::new ();
    let dmut _stdout = IOPipe::new ();
    let dmut _stderr = IOPipe::new ();
    
    pub self run (cmd : [c8], args : [[c8]], cwd : [c8] = "."s8) with cmd = cmd, args = args, cwd = cwd {
        self:.run ();
    }

    prv def run (mut self) {
        self.pid = fork (); // if nothing is written in the fork process the pages are not copied
        // Thus fork is lightweight

        if (self.pid == 0u32) {
            self:.child ()
        }

        self._stdin:.ipipe ():.close ();
        self._stdout:.opipe ():.close ();
        self._stderr:.opipe ():.close ();

        self._stdout:.ipipe ().setNonBlocking ();
        self._stderr:.ipipe ().setNonBlocking ();
    }

    prv def child (mut self) {
        dup2 (self._stdin:.ipipe ().getHandle (), STDIN_FILENO);
        dup2 (self._stdout:.opipe ().getHandle (), STDOUT_FILENO);
        dup2 (self._stderr:.opipe ().getHandle (), STDERR_FILENO);

        self._stdin:.close ();
        self._stdout:.close ();
        self._stderr:.close ();
        
        let dmut args = Vec!(&c8)::new ();
        args:.push (self.cmd.ptr);;
        for i in self.args {
            args:.push (i.ptr);
        }

        let dmut path = Vec!(c8)::new ();
        for i in self.cwd {
            path:.push (i);
        }
        path:.push ('\u{0}'c8);
        chdir (path[].ptr);
        
        if (execvp (self.cmd.ptr, args[].ptr) == -1) {
            _yrt_print_error (("execvp () failed"s8).ptr);            
        }
        
        _yrt_exit (0);
    }

    pub def stdin (mut self) -> dmut &OPipe {
        alias self._stdin:.opipe ()
    }
    
    pub def stdout (mut self)-> dmut &IPipe {
        alias (self._stdout:.ipipe ())
    }

    pub def stderr (mut self)-> dmut &IPipe  {
        alias (self._stderr:.ipipe ())
    }

    pub def wait (mut self)-> i32 {
        let mut status = 0i32;
        waitpid (self.pid, alias &status, 0);
        return status;
    }

}
