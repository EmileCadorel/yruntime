mod std::concurrency::pipe;

import core::typeinfo, core::array;
import etc::runtime::thread;
import std::io;
import std::any;

import std::concurrency::sync;

extern (C) def pipe (streams : &(i32));

mod IOPipe {T} {
    
    pub extern (C) def _yrt_read_pipe (stream : i32, size : usize)-> T;
    
    pub extern (C) def _yrt_write_pipe (stream : i32, data : T, size : usize);
    
}

/**
 * A pipe is a way to communicate between threads
 * It is assumed that pipes are used in shared memory context, and are only used to send references to class
 * If you want to send other types, of data, such as ints, bool etc. you can encapsulate the data into a Any type, or an Option
 * @example: 
 * =================
 * class Foo {
 *    let x : i32;
 *    pub self (i : i32) with x = i {}
 *    impl std::io::Printable;
 * }
 *
 * // Thread 1 : 
 * pipe.write (Foo::new ());
 *
 * // Thread 2
 * println (pipe.read!(&Foo) ());
 * =================
 * @warning: Pipes are blocking, meaning that before writing inside the pipe we assure that someone is reading on the other side 
 */
pub class @final Pipe {
        
    /** The read side of the pipe */
    let mut _read : i32 = 0;
    
    /** The write side of the pipe */
    let mut _write : i32 = 0;

    let mut _mutex = Mutex::new ();
    
    let mut _cond = Condition::new ();
    
    let mut _sem = Semaphore::new ();
        
    pub self () with self (true) {}

    pub self (create : bool) {
        if (create) {
            let mut pipes : [mut i32 ; 2u64] = [0 ; 2u64];
            pipe (alias (pipes).ptr);
            self._read = pipes [0];
            self._write = pipes [1];
        }
    }
    
    /**
     * Get the reference of a object, that has been written in the pipe
     * @warning: it is a blocking process, the thread will wait until something is read
     */
    pub def read {class T} (self) -> T {                        
        self._mutex.lock ();
        self._sem.post ();
        self._cond.wait (self._mutex);
        let ret = IOPipe!{T}::_yrt_read_pipe (self._read, sizeof T);
        self._mutex.unlock ();
        ret
    }

    /**
     * Write a reference to a object in the pipe to be read by another thread
     * @warning: it is a blocking process, the thread will wait until a thread has read the written data
     */
    pub def write {class T} (self, x : T) {            
        self._sem.wait ();
        self._mutex.lock ();
        IOPipe!(T)::_yrt_write_pipe (self._write, x, sizeof T);
        self._cond.signal ();
        self._mutex.unlock ();
    }

    /**
     * Get the reference of an any type in the pipe
     * @warning: it is a blocking process, the thread will wait until someone is reading
     */
    pub def read (self) -> &Any {
        self.read!(&Any) ()
    }

    /**
     * Write the reference of an any type in the pipe
     * @warning: it is a blocking process, the thread will wait until someone is reading
     */
    pub def write {T} (self, x : T) -> void {
        self.write (Some!(T)::new (x))
    }    
    
    impl std::io::Printable {
        pub over print (self) {
            print ("(", self._read, ", ", self._write, ")");
        }
    }

}
