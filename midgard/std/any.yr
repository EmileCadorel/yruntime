// mod std.any;
// import std.memory;

// struct
// | id : [const char]
// | ptr : p!void
//  -> any;

// mod Any {
//     def new (T) (a : T) {
//         return any {a::typeid, cast!(p!void) (alloc (a))};
//     }
// }

// def as (T) (ref a : any) -> ref T {
//     assert (a.id == (mut T)::typeid, "type mismatch : !is (" ~ a.id ~ " : " ~ (mut T)::typeid ~ ")");
//     return * (cast!(p!(mut T)) (a.ptr));
// }

// def isT (T) (a : any) {
//     return (a.id == (mut T)::typeid);
// }

// def opAssign ("=", T) (ref a : any, b : T) {
//     a.id = (mut T)::typeid;
//     a.ptr = cast!(p!void) (alloc (b));
//     return b;
// }


    
