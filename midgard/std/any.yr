mod std::any;
import std::io;
import core::typeinfo, core::duplication;
    
pub {
    /**
     * Ancestor class of all type
     * An any type is relativaly similar to type Option, but doesn't have a default type
     */
    class @abstract Any {
        pub self () {}
        
        impl Printable;

        impl core::duplication::Copiable ;
        
    }


    /**
     * This class is used to have a data in an any value
     */
    class Some (T) over Any {
        pub let value : T;


        pub self (x : T) with value = x {}        

        pub over print (self) {
            print (self.value);
        }

        pub over deepCopy (self) -> mut Any {
            Some!(T)::new (self.value)
        }
    }

    /**
     * Any can have type none, when no value is used
     */
    class None over Any {
        pub self () {}

        pub over print (self) {
            print ("None");
        }

        pub over deepCopy (self) -> mut Any {
            alias None::new ()
        }
    }    

}
