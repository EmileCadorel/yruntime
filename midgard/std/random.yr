mod std::random;
import std::io

extern (C) def rand () -> i32;
extern (C) def srand (i : i32);
extern (C) def time (i : i32) -> i32;

static mut init : bool = false;

pub {

    def uniform (a : i32, b : i32) -> i32 {
        if (!init) {
            init = true;
            srand (time (0));
        }
        
        return rand () % ((b - a) + a);
    }

    def uniform (a : u64, b : u64) -> u64 {
        if (!init) {
            init = true;
            srand (time (0));
        }
        
        return cast!(u64) (rand ()) % ((b - a) + a);
    }
    
    def shuffle (T) (a : [T]) -> mut [mut T] {
        def swap (ref mut a : T, ref mut b : T) {
            let x = a;
            a = b;
            b = x;
        }
        
        let mut x : [mut T] = copy a;
        for i in 0_u64 .. a.len {
            let ch = uniform (0_u64, a.len);
            swap (ref x [i], ref x [ch]);
        }
        return alias x;
    } 

}
