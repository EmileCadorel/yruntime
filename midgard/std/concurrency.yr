mod std.concurrency;
import std.c.thread;

struct
| id : u64
 -> Thread;    

struct 
| data : pthread_mutex_t
 -> Mutex;

struct
| read : i32
| write : i32
| locker : Mutex
 -> Pipe;

mod thread {

    extern (C) read (file : i32, c : p!u8, len : u32)-> u32;
    extern (C) write (file : i32, c : p!u8, len : u32);
    
    def @inline spawn (T...) (foo : fn (T)-> void, data : T) -> Thread {
        return spawn (1U, foo, data.expand) [0];
    }
    
    def spawn (T...) (n : u32, foo : dg (T)-> void, data : T) -> [Thread] {
        let res = [Thread ; new n];
        let pipes = [Pipe ; new n];

        let barrier = pthread_barrier_t::init;
        pthread_barrier_init (&barrier, null, n + 1U);
        
        for it in 0U .. n {
            let id = cast!u64 (it);// + ThreadInfos::launched.len;
            let ptr = (ptr : p!(t!(p!pthread_barrier_t, dg (T) -> void, T))) {
                let (barr, fun, data...) =  *ptr;
                pthread_barrier_wait (barr);
                fun (data.expand);
                return cast!(p!void) (null);
            };

            let alloc = [t!(p!pthread_barrier_t, dg (T) -> void, T) ; new 1U];
            alloc[0] = (&barrier, foo, data.expand);
            pthread!(t!(p!pthread_barrier_t, dg (T) -> void, T))::pthread_create (&id, null, ptr, alloc.ptr);
            res [it] = Thread {id};
            pipes [it] = pipe ();
        }
        
        ThreadInfos::launched = ThreadInfos::launched ~ res;
        ThreadInfos::pipes = ThreadInfos::pipes ~ pipes;
        pthread_barrier_wait (&barrier);
        pthread_barrier_destroy (&barrier);
        return res;
    }
    
    def join (const th : Thread) {
        pthread_join (th.id, null);
    }

    def join (const th : [Thread]) {
        for it in th
            pthread_join (it.id, null);
    }

    def selfId () -> Thread {
        return Thread {pthread_self ()};
    }
    
    def mutex () -> Mutex {
        let locker = Mutex::init;
        pthread_mutex_init (&(locker.data), null);
        return locker;
    }

    def lock (ref locker : Mutex) {
        pthread_mutex_lock (&(locker.data));
    }

    def unlock (ref locker : Mutex) {
        pthread_mutex_unlock (&(locker.data));
    }
    
    def pipe ()-> Pipe {
        extern (C) pipe (ref files : Pipe);
        let res = Pipe::init;
        res.locker = mutex ();
        pipe (res);
        return res;
    }

    def send (T) (id : Thread, val : T) {
        let pipe = ThreadInfos::getPipe (id);
        pipe.locker.lock ();
        thread::write (pipe.write, cast!(p!u8) (&val), val::sizeof);
        pipe.locker.unlock ();
    }

    def recv (T) () {
        let pipe = ThreadInfos::getPipe (selfId ());
        let val = T::init;
        pipe.locker.lock ();
        thread::read (pipe.read, cast!(p!u8) (&val), val::sizeof);
        pipe.locker.unlock ();
        return val;
    }
    

}

private mod ThreadInfos {
    
    public static launched : [Thread]; 
    public static pipes : [Pipe];
    
    self () {
        launched = [Thread ; new 1UL];
        pipes = [Pipe ; new 1UL];
        launched [0] = thread::selfId ();
        pipes [0] = thread::pipe ();
    }

    def getPipe (id : Thread) -> ref Pipe {
        for i in 0U .. launched.len {
            if id.id == launched [i].id {
                return pipes [i];
            }
        }
        assert (false, "Undefined thread id");
    }
    
}

