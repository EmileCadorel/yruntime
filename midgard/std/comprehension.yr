// mod std.comprehension;

// public __macro comp {
//     ($x: expr "|" $y: ident "in" $z: expr) {
//         let res;
//         cte if (__pragma (compiles, z.fst)) {
//             let y = z.fst;
//             res = [ typeof (x); new 0U ];
//         } else {
//             let y = z [0];
//             res = [ typeof (x) ; new 0U ];
//         }
        
        
//         for y in z {
//             res = res ~ [x];
//         }
//         res;
//     }

// }
