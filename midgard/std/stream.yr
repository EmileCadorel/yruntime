mod std::stream;

import core::exception, core::typeinfo, core::array;
import core::object;

import std::collection::vec;
import std::io;


/**
 * When a class implement it, we can call the function write with it
 * @example: 
 * ====================
 * class X {
 * // ...
 * impl utils::stream::Streamable;
 * }
 *
 * let a = X::new ();
 * let dmut stream = StringStream::new ();
 * stream:.write ("Test on : ", a); 
 * println (stream);
 * ====================
 * @warning: 
 * ===========
 * Streamable function stream static typeinfo
 * Which means that for the following example: 
 * @example: 
 * ===========
 * mod main;
 * 
 * class Foo {
 *     pub self () {}
 *     
 *     impl std::io::Streamable;
 * }
 * 
 * class Bar over Foo {
 *    pub self () {}
 * }
 * 
 * def main () {
 *     let x = Bar::new ();
 *     let dmut stream = StringStream::new ();
 *     stream:.write (x);
 *     println (stream);
 * }
 * ===========
 * The result will be : 
 * @example: 
 * ============
 * main::Foo ()
 * ============
 * Because, main::Bar does not reimplement Streamable, so the definition of main::Foo is used
 * ===========
 */
pub trait Streamable {

    /**
     * Print the content of the class on stdout
     * @returns: true if something has been printed, false otherwise    
     */
    prot def __utils_stream__streamContent (self, dmut stream : &StringStream) -> bool {
        stream;
        cte if (__pragma!compile ({self::super.__utils_stream__streamContent ();})) {
            let printed = self::super.__utils_stream__streamContent ();
            if (typeof (__pragma!local_tupleof (self))::arity != 0u32 && printed)
                stream:.write (", "s8);
        }
        
        cte if (typeof (__pragma!local_tupleof (self))::arity != 0u32) {
            let mut j = 0;
            for i in __pragma!local_tupleof (self) {
                if (j != 0) stream:.write (", "s8);
                cte if (__pragma!compile ({stream:.write (i);})) {
                    stream:.write (i);
                } else {
                    stream:.write (typeof (i)::typeid);
                }
                j += 1;
            }
        }
        
        cte (typeof (__pragma!local_tupleof (self))::arity != 0u32)
    }

    /**
     * Print the class name and content into the stream
     */
    pub def toStream (self, dmut stream: &StringStream)-> void {
        stream:.write (typeof (self)::typeid, '('c8);
        self.__utils_stream__streamContent (alias stream);
        stream:.write (')'c8);
    }
    
}

/**
 * A stringstream is used to write content to a string in a more efficient manner than concatenation
 * @example: 
 * =============
 * class X {
 *  // ...
 *  impl Streamable;
 * }
 *
 * def foo () -> i32 {
 *    // ... 
 * }
 *
 * def bar () -> [c8] {
 *   // ...
 * }
 * 
 * let dmut stream = Stringstream::new ();
 * stream:.write ("Foo");
 * stream:.write (X::new ();
 * stream:.writef ("Foo %, Bar %", foo (), bar ());
 * =============
 */
pub class @final StringStream {

    let dmut _content = Vec!{c8}::new ();
    
    let dmut _entabing = Vec!{[c8]}::new ();

    let mut _willEntab = false;
    
    /**
     * Create an empty stringstream
     */
    pub self () {}

    /**
     * Stores a list of entabing string, and write them at the beginning of each new line
     * To stop the writting, cf detabing
     * @example: 
     * ==================
     * let dmut str = StringStream::new ();
     * str:.write ("Array {\n");
     * str:.entabing ();
     * for i in 0 .. 10 {
     *     str:.write (i, "\n");
     * }
     * str:.detabing ();
     * str:.write ("}"); 
     * ==================
     */
    pub def entabing (mut self, txt : [c8] = "\t"s8) {
        self._entabing:.push (txt);
    }

    /**
     * Stop the current entabing (if there is any, does nothing otherwise)
     */
    pub def detabing (mut self) {
        self._entabing:.pop ()?;
    }
    
    /**
     * Write a c8 into the stream
     */
    pub def write (mut self, c : c8) -> dmut &StringStream {                
        if self._willEntab {
            for j in self._entabing {
                for z in j {
                    self._content:.push (z);
                }
            }
            self._willEntab = false;
        }
        
        self._content:.push (c);
        if (c == '\n'c8) {
            self._willEntab = true;
        }
        alias self
    }

    /**
     * Write a string in utf8 into the stream
     */
    pub def write (mut self, c : [c8]) -> dmut &StringStream {
        for i in c {
            if self._willEntab {
                for j in self._entabing {
                    for z in j {
                        self._content:.push (z);
                    }
                }
                self._willEntab = false;
            }
            
            self._content:.push (i);
            if (i == '\n'c8) {
                self._willEntab = true;
            }
        };
        alias self
    }

    /**
     * Write a element in the stream
     * @info: the element must be convertible to a [c8]
     */
    pub def write {T} (mut self, c : T) -> dmut &StringStream {
        import std::conv;
        self:.write (c.to![c8] ());
        alias self
    }

    /**
     * Write an object that implement the trait Streamable in the stream
     */
    pub def write {T impl Streamable} (mut self, c : T) -> dmut &StringStream {
        c.toStream (alias self);
        alias self
    }

    /**
     * Write a string into the stream
     */
    pub def write (mut self, c : [c32]) -> dmut &StringStream {
        import std::conv;
        self:.write (c.to![c8] ());
        alias self
    }
    
    /**
     * Write an array of element into the stream
     */
    pub def write {T of [U], U} (mut self, c : T) -> dmut &StringStream {
        let mut j = 0u64;
        match (self._currentColor) {
            Ok (x : _) => {
                self:.write (Colors::RESET, '{'c8, x);
            }
            _ => {
                self:.write ('{'c8);
            }
        }
        for i in c {
            if (j != 0u64) {
                match (self._currentColor) {
                    Ok (x : _) => {
                        self:.write (Colors::RESET, ", "s8, x);
                    }
                    _ => { self:.write (", "s8); }
                }
            }
            j += 1u64;
            self:.write (i);            
        }
        match (self._currentColor) {
            Ok (x : _) => {
                self:.write (Colors::RESET, '}'c8, x);
            }
            _ => {
                self:.write ('}'c8);
            }
        }
        alias self
    }

    /**
     * Write multiple element into the stream
     */
    pub def write {F, T...} (mut self, f : F, r : T) -> dmut &StringStream {
        self:.write (f);
        cte if (is!T {Z of (U,), U...}) {
            for i in r
                self:.write (i);
        } else {
            self:.write (r);
        }
        alias self
    }

    /**
     * Write a tuple into the stream
     */
    pub def write {T of (U,), U...} (mut self, a : T) -> dmut &StringStream {
        self:.write ('('c8);
        let mut j = 0;
        for i in a {
            if j != 0 {
                self:.write (','c8);
            }
            self:.write (i);
            j += 1;
        }        
        if (j == 1) self:.write (','c8);
        self:.write (')'c8);
        alias self
    }

    /**
     * Write an option type into the stream
     */
    pub def write {T} (mut self, a : T?) -> dmut &StringStream {
        match a {
            Ok  (x:_)   => self:.write ("Ok("s8, x, ')'c8);
            Err (msg:_) => self:.write ("Err("s8, msg, ')'c8);
            Err ()      => self:.write ("Err()"s8);
        }
        alias self
    }

    /**
     * Write an struct into the stream
     */
    pub def write {struct T} (mut self, a : T) -> dmut &StringStream {
        self:.write (T::typeid, '('c8);
        cte if (typeof (__pragma!tupleof (a))::arity > 0us) {
            let mut j = 0;
            for i in __pragma!tupleof (a) {
                if (j != 0) self:.write (", "s8);
                self:.write (i);
                j += 1;
            }
        }
        self:.write (')'c8);
        alias self
    }
    
    /**
     * The content of the stream, in a [c8]
     */
    pub def str (self) -> [c8] {
        self._content []
    }

    impl std::io::Printable {
        
        /**
         * Print the content of the stream to stdout
         */
        pub over print (self) {
            print (self.str ());
        }
    }

    impl std::stream::Streamable {

        /**
         * Write the content of the stream inside another stream
         */
        pub over toStream (self, dmut stream: &StringStream) {
            stream:.write (self.str ());
        }
        
    }
    
}
