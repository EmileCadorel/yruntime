mod std.demangle;
import core.string, core.io;
import core.array;
import std.outbuffer;

def getNextInt (ref elem : slice!char) -> u32 {
    let len = 0U;
    while elem [len] >= '0' && elem [len] <= '9' {
        len ++;
    }

    let mul = 1U, i = cast!i32 (len) - 1, res = 0U;
    while i >= 0 {
        res += cast!u32 (elem [i] - '0') * mul;
        mul *= 10U;
        i --;
    }
    elem = slice!char {elem.len - len, elem.ptr + len};
    return res;
}

def demangle_param (ref current : slice!char) -> string {
    let buf = OutBuffer ();
    match current [0] {
        'A' => {
            current = slice!char {current.len - 1U, current.ptr + 1U};
            buf.write ("[", demangle_param (current), "]");
        }
        'c' => {
            current = slice!char {current.len - 2U, current.ptr + 2U};
            buf.write ("const(", demangle_param (current), ")");                    
        }
        'N' => {
            current = slice!char {current.len - 1U, current.ptr + 1U};
            let next = demangle_param (current);            
        }
        _ => {
            match current [0] {
                'a' => buf.write ("char");
                'i' => buf.write ("int");
                'v' => buf.write ("void");
            }
            current = slice!char {current.len - 1U, current.ptr + 1U};            
        }
    }
    return buf.current;
}

def demangle_params (str : slice!char) -> string {
    if str [0] == 'F' {
        let buf = OutBuffer ();
        buf.write ('(');
        let current = slice!char {str.len - 1U, str.ptr + 1U};
        while current.len != 0 {
            match current [0] {
                'Z' => {
                    current = slice!char {current.len - 1U, current.ptr + 1U};
                    break;
                }
                _ => {
                    let aux = demangle_param (current);
                    if buf.len != 1U && aux.len != 0U
                        buf.write (", ");
                    buf.write (aux);
                }
            }            
        }
        
        buf.write (") -> ");
        buf.write (demangle_param (current));
        return buf.current;
    }
    
    return string {str.len, str.ptr};       
}

def demangle_fn (str : string) -> string {
    if str [0] == '_' && str [1] == 'Y' {
        if str [2] == 'm' return str;
        let buf = OutBuffer (); 
        let current = str [2U .. str.len];
        let len = 1U;
        while current.len != 0U {
            len = getNextInt (current);
            if (len == 0U) break;
            if buf.len != 0
                buf.write ('.');
            
            for it in 0U .. len 
                buf.write (current [it]);            
        
            current = slice!char {current.len - len, current.ptr + len};
        }
        
        buf.write (' ', demangle_params (current));        
        return buf.current;
    } else {
        return str;
    }
}

