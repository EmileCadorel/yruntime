mod std.outbuffer;

extern (C) snpri32f (const buf : p!char, len : i32, const format : p!char, ...) -> i32;
extern (C) spri32f (const buf : p!char, const format : p!char, ...);

private {
    struct
    | current : [char]
    | len : u64
     -> Outbuffer;
        
    def resize (ref buf : Outbuffer, len : u64) {
        let capacity = buf.current.len;
        if (capacity == 0U) capacity = len + 1U;
        else if (capacity * 2U < len) capacity = len + capacity + 1U;
        else capacity = (capacity * 2U) + 1U;

        let aux = [char ; capacity];
        for it in 0U .. buf.len {
            aux [it] = buf.current [it];
        }

        buf.current = aux;
    }       
}

def OutBuffer () -> mut Outbuffer {
    return Outbuffer {[char; 0U], 0UL};
}

def writeln (F, T...) (ref buf : Outbuffer, const fst : F, next : const T) -> ref Outbuffer {
    buf.write (fst);
    buf.write (next.expand);
    buf.write ('\n');
    return buf;
}

def writeln (F) (ref buf : Outbuffer, const fst : F) -> ref Outbuffer {
    buf.write (fst);
    buf.write ('\n');
    return buf;
}

def write (F, T...) (ref buf : Outbuffer, const fst : F, next : const T) -> ref Outbuffer {
    buf.write (fst);
    buf.write (next.expand);
    return buf;
}

def write (ref buf : Outbuffer, const str : string) -> ref Outbuffer {
    if buf.current.len < buf.len + str.len {
        buf.resize (buf.len + str.len);
    }

    for it in 0U .. str.len {
        buf.current [it + buf.len] = str [it];
    }
    
    buf.len += str.len;
    return buf;
}

def write (ref buf : Outbuffer, i : i32) -> ref Outbuffer {
    let len = cast!u32 (snpri32f (null, 0, "%d".ptr, i));
    if buf.current.len < buf.len + len {
        buf.resize (buf.len + len);
    }
    
    spri32f (buf.current.ptr + buf.len, "%d".ptr, i);
    buf.len += len;
    return buf;
}

def write (ref buf : Outbuffer, c : char) -> ref Outbuffer {
    if buf.current.len < buf.len + 1U {
        buf.resize (buf.len + 1U);
    }

    buf.current [buf.len] = c;
    buf.len += 1U;
    return buf;
}

def to (T of string) (ref buf : Outbuffer) -> mut string {
    return string {buf.len, buf.current.ptr};
}
