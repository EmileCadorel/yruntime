mod std::socket::tcp;

pub import std::socket::ip;
import std::c::socket;

pub mod Tcp {

    extern (C) def htons (host : u16) -> u16;
    extern (C) def inet_addr (c : &char) -> u32;
    extern (C) def inet_aton (c : &char, i : &u32);
    
    pub struct
    | mut socket : i32
    | mut local_addr : IpAddr
     -> TcpListener;

    pub struct
    | mut socket : i32
    | mut remote_addr : IpAddr
     -> TcpStream;

    pub def bind (addr : [c32]) -> TcpListener {
        import std::io;
        let sock = C::socket (cast!i32 (AddrFamily::INET), SocketType::SOCK_STREAM, 0);
        if sock == -1
            println ("Error while creating the socket");
        
        let mut ipaddr = toIpAddr (addr);
        let mut raddr = SockAddrIn (
            cast!i16 (AddrFamily::INET),
            htons (ipaddr.port),
            InAddr (ipaddr.addr.v4.s_addr),
            [0u8; 8]
        );

        if C::bind (sock, &raddr, cast!u32 (sizeof SockAddrIn)) < 0 {
            println ("Fail bind");
        }
        

        if C::listen (sock, 3) < 0 {
            println ("Fail listen");
            //   assert (false, "Listen error")
        }
        
        
        TcpListener (sock, ipaddr)
    }

    pub def accept (listener : TcpListener) -> TcpStream {
        import std::io;
        let clientAddr = SockAddrIn (0i16, 0u16, InAddr (0u32), [0u8; 8]);
        let lenAddr = cast!u32 (sizeof SockAddrIn);

        let client = C::accept (listener.socket, &clientAddr, &lenAddr);

        return if client < 0 {
            TcpStream (
                -1,
                IpAddr (IpVersion::V4, IpAddrC (?v4=IpV4Addr (0u32)), 0_u16)
            )
        } else {
            let ipaddr = IpAddr (IpVersion::V4, IpAddrC (?v4=IpV4Addr (clientAddr.sin_addr.s_addr)), clientAddr.sin_port);            
            TcpStream (client, ipaddr)
        }
        
    }

    pub def connect (addr : [c32]) -> TcpStream {
        import std::io;
        let sock = C::socket (cast!i32 (AddrFamily::INET), SocketType::SOCK_STREAM, 0);
        let ipaddr = toIpAddr (addr);

        let remoteAddr = SockAddrIn (
            cast!i16 (AddrFamily::INET),
            htons (ipaddr.port),
            InAddr (ipaddr.addr.v4.s_addr),
            [0u8; 8]
         );
        
        C::connect (sock, &remoteAddr, cast!u32 (sizeof SockAddrIn));
        // if res != 0
        //     assert (false, "Connect failure")
        
        TcpStream (sock, ipaddr)        
    }
    
    pub def write (stream : TcpStream, data : [c8]) {
        C::send (stream.socket, cast!(&void) (data.ptr), cast!u32 (data.len), 0);
    }

    pub def write (stream : TcpStream, data : &void, len : u64) {
        C::send (stream.socket, data, cast!u32 (len), 0);
    }
    
    pub def read (stream : TcpStream, data : [u8]) -> u64 {
        cast!u64 (C::recv (stream.socket, cast!(&void) (data.ptr), cast!u32 (data.len), 0))
    }

    pub def read (stream : TcpStream, data : &void, len : u64)-> i32 {
        C::read (stream.socket, data, cast!u32 (len))
    }

    pub def close (stream : TcpStream) {
        C::close (stream.socket);
    }

}
