mod std.socket.ip;

import std.string, std.conv;
import core.array;

extern (C) htons (host : u16) -> u16;
public extern (C) inet_aton (const c : p!char, i : p!u32);

enum
| V4 : 0
| V6 : 1
 -> IpVersion;

struct
| type : IpVersion
| addr : IpAddrC
| port : u16
 -> IpAddr;

union
| v4 : IpV4Addr
| v6 : IpV6Addr
 -> IpAddrC;

struct
| s_addr : u32
 -> IpV4Addr;

struct
| segments : [u16 ; 8U]
 -> IpV6Addr;

mod inner {
    
    def toIpAddr (const str : string) -> IpAddr {
        let index = str.lastIndexOf (':');
        if index == str.len { return IpAddr {IpVersion::V4, IpAddrC {IpV4Addr::init}, 0US}; }
        let port = (const (string) {str.len - index, str.ptr + index}).to!u16;
        let aux = (const (string) {index - 1U, str.ptr}).dup ();
        aux [index] = '\0';
        let addr = IpV4Addr::init;
        inet_aton (aux.ptr, &addr.s_addr);
        
        return IpAddr {IpVersion::V4, IpAddrC {addr}, port};        
    }
    
}
