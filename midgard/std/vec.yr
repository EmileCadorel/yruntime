// mod std.vec;

// public {
//     __macro vec {
//         ($x : expr "|" $y: ident "in" $z1: expr ".." $z2: expr) {
//             let res;
//             {
//                 let y = z1;
//                 res = Vec!(typeof (mut x))::init ();
//             }
            
//             for y in z1 .. z2 {
//                 res.push (x);
//             }
//             res;
//         }

//         ($x : expr ";" "new" $y : expr) {
//             let res = Vec!(typeof (mut x))::new (y);
//             for i in 0UL .. cast!u64 (y)
//                 res [i] = x;
//             res;
//         }
        
//         (+x : ($val : expr, ",")) {
//             let res = Vec!(typeof (mut x.0.val))::init ();
//             cte for i in x {
//                 res.push (i.val);
//             }
//             res;
//         }
        
//     }       
// }

// struct (T)
// | capacity : u64
// | len : u64
// | data : p!T
//  -> Vector;

// mod Vec (T) {
//     def init () {
//         return Vector!T {0UL, 0UL, null};
//     }
    
//     def new (len : u64) {
//         return Vector!T {len, len, ([mut T ; new len]).ptr};
//     }    
// }

// def push (T) (ref a : Vector!T, b : T) {
//     if (a.capacity == 0UL) {
//         a.capacity = 10UL;
//         a.len = 1UL;
//         let aux = [mut T ; new 10UL];
//         aux [0] = b;
//         a.data = aux.ptr;
//     } else if a.capacity == a.len {
//         let aux = [mut T ; new a.len * 2UL];
//         a.capacity = a.capacity * 2UL;
//         for i in 0UL .. a.len {
//             aux [i] = *(a.data + (i * T::sizeof));
//         }
//         aux [a.len] = b;
//         a = Vector!T {a.capacity, a.len + 1UL, aux.ptr};
//     } else {        
//         *(a.data + (a.len * T::sizeof)) = b;
//         a.len = a.len + 1UL;        
//     }
// }

// def push (T) (ref a : Vector!T, b : const Vector!T) {
//     for i in 0UL .. b.len {
//         a.push (b [i]);
//     }
// }

// def pop (T) (ref a : Vector!T) -> T {
//     if (a.len == 0UL) assert (false, "Pop empty vector");
//     else {
//         let res = *(a.data + ((a.len - 1UL)* T::sizeof));
//         a.len = a.len - 1UL;
//         if a.capacity >= a.len * 2UL {
//             let aux = [mut T ; new a.len];
//             for i in 0UL .. a.len
//                 aux [i] = *(a.data + (i * T::sizeof));
//             a.data = aux.ptr;
//             a.capacity = a.len;
//         }
//         return res;
//     }
// }

// def @inline opIndex (T) (a : Vector!T, i : i64) -> ref T {
//     import std.conv;
//     assert (a.len > i, "overflow " ~ (cast!i64 (a.len)).to!string ~ " < " ~ i.to!string);
//     return *(a.data + (cast!u64 (i) * T::sizeof));
// }

// def @inline opIndex (T) (a : Vector!T, i : u64) -> ref T {
//     import std.conv;
//     assert (a.len > i, "overflow " ~ (cast!i64 (a.len)).to!string ~ " < " ~ (cast!i64 (i)).to!string);
//     return *(a.data + (i * T::sizeof));
// }

// def opIndex (T2, T) (a : Vector!T2, i : r!(T)) -> mut slice!T2 {
//     assert (i.scd >= i.fst && (i.scd - i.fst) <= a.len && i.fst <= a.len);
//     return slice!T2 {cast!u64 (i.scd - i.fst), a.data + (cast!u64 (i.fst) * T2::sizeof)};
// }

// def print if (true) (T) (a : Vector!(T)) {
//     print ('[');
//     for i in 0UL .. a.len {
//         print (*(a.data + (i * T::sizeof)));
//         if i != a.len - 1UL
//             print (", ");
//     }
//     print (']');
// }

// def @inline opIter (1, T) (ref a : Vector!T) {
//     return vecIter::It!T {0UL, &a};
// }

// def @inline get (0, T) (ref a : vecIter::It!T) -> ref T {
//     return (*a.vec)[a.it];
// }

// def @inline next (T) (ref a : vecIter::It!T) {
//     a.it ++;
// }

// def @inline isEnd (T) (a : vecIter::It!T) {
//     return a.it == a.vec.len;
// }

// def @inline opIter (2, T) (ref a : Vector!T) {
//     return vecIter::It2!T{0UL, &a};
// }

// def @inline get (0, T) (ref a : vecIter::It2!T) -> ref u64 {
//     return a.it;
// }

// def @inline get (1, T) (ref a : vecIter::It2!T) -> ref T {
//     return (*a.vec)[a.it];
// }

// def @inline next (T) (ref a : vecIter::It2!T) {
//     a.it ++;
// }

// def @inline isEnd (T) (a : vecIter::It2!T) {
//     return a.it == a.vec.len;
// }

// private mod vecIter {

//     struct (T)
//     | it : u64
//     | vec : p!(Vector!T)
//      -> It;

//     struct (T)
//     | it : u64
//     | vec : p!(Vector!T)
//      -> It2;
                
// }

