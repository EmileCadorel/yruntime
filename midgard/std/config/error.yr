mod std::config::error;

import std::io;
import core::object, core::typeinfo, core::exception;
import core::array;

pub class @final ConfigError over core::exception::Exception {


    pub let field : [c32];
    
    /// The type from which we want a cast    
    pub let fr : TypeInfo;

    /// The type to which we want a cast
    pub let to : TypeInfo;

    pub let subError : (&Exception)?;
    
    /**
     * @params: 
     *    - from, the type from which we want a cast
     *    - to, the type to which we want a cast
     */
    pub self (name : [c32] = "", to : TypeInfo, from : TypeInfo, subError : (&Exception)? = ((&Exception)?)::__err__) with fr = from, to = to, field = name, subError = subError  {}       
    
    impl std::io::Printable {

        /**
         * Just print the error to stdout
         */
        pub over print (self) {
            print (self::typeinfo.name, ' ', '(');
            print (self.fr.name, "-> ", self.to.name);
            print (')');
            if (self.field != "")
                print (" for field : ", self.field);
            
            match self.subError {
                Ok (x:_) => {
                    println (" => ");
                    print ("\t", x);
                }
                Err () => {
                    if (self.hasTrace ()) {
                        println (":");
                        self::super.printStackTrace ();
                    }
                }
            }
        }
        
    }
    
}    
