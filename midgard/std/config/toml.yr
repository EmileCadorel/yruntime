mod std::config::toml;

pub import std::config;
import std::lexer;

/** 
 * The list of tokens that can be found inside a Toml file
 * 
 */
enum
| LCRO = "["
| RCRO = "]"
| LACC = "{"
| RACC = "}"
| EQUALS = "="
| COMA = ","
| QUOTE = "'"
| DQUOTE = "\""
| DOT = "."
| ESCAPE = "\\"
 -> TomlTokens;


pub class @final SyntaxError over Exception {

    pub let msg : [c32];
    pub let line : u64;
    pub let col : u64;
    
    pub self (msg : [c32], line : u64, col : u64)
        with msg = msg, line = line, col = col
    {}

    impl std::io::Printable {
        pub over print (self) {            
            print ("SyntaxError (", self.line, ",", self.col, ") : ", self.msg);
            if (self.trace.len != 0u64) {
                println ("");
                self::super.printStackTrace ();
            }
        }
    }        
}

/**
 * Parse a string containing a toml formated content 
 * @example: 
 * ================
 * let str = "[foo]\nbar=1\nbaz=2\n"s8
 * let config : &Dict = parse (str);
 * ================
 * @throws: 
 *    - &SyntaxError: if the format is not respected in the content
 */
pub def parse (content : [c8])-> &Dict
    throws &SyntaxError
{
    import std::conv;
    let c = to![c32](content);
    return parse (c);
}


/**
 * Parse a string containing a toml formated content 
 * @example: 
 * ================
 * let str = "[foo]\nbar=1\nbaz=2\n"
 * let config : &Dict = parse (str);
 * ================
 * @throws: 
 *    - &SyntaxError: if the format is not respected in the content
 */
pub def parse (content : [c32])-> &Dict
    throws &SyntaxError
{
    let dmut result = Dict::new ();
    let dmut lex = Lexer::new (content, tokens-> TomlTokens::members);
    loop {
        let (tok, line, col) = lex:.next ();
        
        if (tok == TomlTokens::LCRO) {
            let name = lex:.next ();
            let (next, l, c) = lex:.next ();
            
            if (next != TomlTokens::RCRO) throw SyntaxError::new ("expected ']' (not '" ~ tok ~ "')", l, c);
            
            result:.insert (name._0, parseDict (alias lex, true));            
        } else if (tok == "") {
            break {}
        } else {
            throw SyntaxError::new ("expected '[' (not '" ~ tok ~ "')", line, col);
        }
    }
    
    return result;
}

/**
 * Inner function for parsing a dictionnary inside a toml str 
 * @params: 
 *    - lex: the lexer that is currently reading the content of the file
 *    - glob: true if the dictionnary is a global dictionnary in the toml str (non global dictionnaries, are surrounded by '{' '}', and separates the items with ',')
 * @example: 
 * =============
 * let glob = "foo=9\n bar=7";
 * let loc = "{foo=9, bar=7}";
 *
 * let dmut glex = Lexer::new (glob, tokens-> TomlTokens::members);
 * let gDict : &Dict = parseDict (alias glex, true);
 * 
 * let dmut llex = Lexer::new (loc, tokens-> TomlTokens::members);
 * let lDict : &Dict = parseDict (alias llex, false);
 * =============
 * @throws: 
 *    - &SyntaxError: if the format is not respected 
 */
prv def parseDict (dmut lex : &Lexer, glob : bool)-> &Dict
    throws &SyntaxError
{
    let dmut dict = Dict::new ();
    if (!glob) {
        let (skip, l, c) = lex:.next ();
        if (skip != TomlTokens::LACC)
        throw SyntaxError::new ("expected '{' (not '" ~ skip ~ "')", l, c);
    }

    loop {
        let (name, _, _) = lex:.nextNoConsume ();

        if (name == "" || name == TomlTokens::LCRO) break {}
        else lex:.next ();
        
        let (tok, line, col) = lex:.next ();
        if (tok != TomlTokens::EQUALS) throw SyntaxError::new ("expected '=' (not '" ~ tok ~ "')", line, col);

        dict:.insert (name, parseValue (alias lex));

        if (!glob) {
            let next = lex:.next ();
            if (next._0 != TomlTokens::COMA && next._0 != TomlTokens::RACC) {
                throw SyntaxError::new ("expected ',' or '}' (not '" ~ next._0 ~ "')", next._1, next._2);                
            }
            if (next._0 == "}") break {}
        }
    }
    
    return dict;
}

/**
 * Internal function used for parsing arrays
 * @params: 
 *    - lex: the lexer containing the array
 * @example: 
 * =============
 * let str = "[1, 2, 3]";
 * let dmut lex = Lexer::new (str, tokens-> TomlTokens);
 * let arr : &Array = parseArray (alias lex);
 * =============
 * @throws: 
 *    - &SyntaxError: if the format is not respected
 */
prv def parseArray (dmut lex : &Lexer) -> &Array
    throws &SyntaxError
{
    let dmut arr = Array::new ();
    {
        let (skip, l, c) = lex:.next ();
        if (skip != "[") throw SyntaxError::new ("expected '{' (not '" ~ skip ~ "')", l, c);
    }
    
    loop {
        let (next, _, _) = lex:.nextNoConsume ();
        if (next == "]") {
            lex:.next ();
            break {};
        }
        
        arr:.push (parseValue (alias lex));
        let (tok, line, col) = lex:.next ();
        if (tok == "]") break {}
        else if (tok != ",") {            
            throw SyntaxError::new ("expected ']' or ',' (not '" ~ tok ~ "')", line, col);
        }
    }
    
    return arr;
}

/**
 * Internal function used for parsing a int content inside a lexer using the toml format
 * @params: 
 *    - lex: the lexer containing the int
 * @example: 
 * =============
 * let str = "334";
 * let dmut lex = Lexer::new (str, tokens-> TomlTokens);
 * let i : &Int = parseInt (alias lex);
 * =============
 * @throws: 
 *    - &SyntaxError: if the format is not respected
 */
prv def parseInt (dmut lex : &Lexer) -> &Config
    throws &SyntaxError
{
    import std::conv;
    let (next, l, c) = lex:.next ();
    {
        let (dot, _, _) = lex:.nextNoConsume ();
        if (dot == TomlTokens::DOT) {
            lex:.next ();
            Float::new (f-> {
                let aux = lex:.nextNoConsume ();
                let mut res = next ~ dot ~ aux._0;
                let f = to!f64 (res);
                lex:.next ();
                f
            } catch {
                _  => {
                    {
                        let mut res = next ~ dot;
                        let f = to!f64 (res);
                        f
                    } catch {
                        _ : &CastFailure => {
                            throw SyntaxError::new ("expected float value (not '" ~ next ~ dot ~ "')", l, c);
                        }
                    }                                        
                } 
            })
        } else 
            Int::new (to!i64 (next))
    } catch {
        _ : &CastFailure => {
            {
                let u = to!(u32, "x") (next);
                Int::new (cast!i64 (u))
            } catch {
                _ =>  
                throw SyntaxError::new ("expected int value (not '" ~ next ~ "')", l, c);
            }
        }
        x : &SyntaxError => throw x;
    }
}

/**
 * Internal function used for parsing a string content inside a lexer using the toml format
 * @info: the string can be surrounded by ' or by "
 * @params: 
 *    - lex: the lexer containing the string
 * @example: 
 * =============
 * let str = "'test'";
 * let dmut lex = Lexer::new (str, tokens-> TomlTokens);
 * let i : &Str = parseString (alias lex);
 * =============
 * @throws: 
 *    - &SyntaxError: if the format is not respected
 */
prv def parseString (dmut lex : &Lexer)-> &Str
    throws &SyntaxError
{

    let mut res = "";
    
    let (end, line, col) = lex:.next ();
    if (end != "'" && end != "\"") throw SyntaxError::new ("expected '\"' or '\\'' (not '" ~ end ~ "')", line, col);

    lex:.doSkip (false);
    loop {
        let (next, l, c) = lex:.next ();        
        if (next == "") {
            throw SyntaxError::new ("Unterminated string literal", l, c);
        } else if (next == end) break {}
        else if (next == TomlTokens::ESCAPE) {
            let (af, _, _) = lex:.next ();
            match af {
                "a" => { res = res ~ "\a"; }
                "b" => { res = res ~ "\b"; }
                "f" => { res = res ~ "\f"; }
                "n" => { res = res ~ "\n"; }
                "r" => { res = res ~ "\r"; }
                "t" => { res = res ~ "\t"; }
                "v" => { res = res ~ "\v"; }
                "\\" => { res = res ~ "\\"; }
                "\'" => { res = res ~ "'"; }
                "\"" => { res = res ~ "\""; }
                "\?" => { res = res ~ "\?"; }
                "u" => { res = res ~ [parseUnicode (alias lex)]; }
                _ => throw SyntaxError::new ("Undefined escape sequence : \\" ~ af, l, c);                
            }
        } else {
            res = res ~ next;            
        }
    }
    
    lex:.doSkip (true);
    return Str::new (res);
}


/**
 * Parse an unicode value into a toml content
 * @example: 
 * ============
 * let str = "{0x1F3B5}";
 * let dmut lex = Lexer::new (str, tokens-> TomlTokens);
 * let i : c32 = parseUnicode (alias lex);
 * ============
 * @assume: the \u is already read in the lexer
 */
prv def parseUnicode (dmut lex : &Lexer)-> c32
    throws &SyntaxError
{
    let (next, l, c) = lex:.next ();
    if (next != TomlTokens::LACC) {
        throw SyntaxError::new ("expected '{' (not '" ~ next ~ "')", l, c);
    }

    let (code, l2, c2) = lex:.next ();
    let i = {        
        import std::conv;
        cast!c32 (to!(u32, "x") (code))            
    } catch {
        _ =>
            throw SyntaxError::new ("expected hexa code (not '" ~ code ~ "')", l2, c2);
    }
    
    let (end, l_, c_) = lex:.next ();
    if (end != TomlTokens::RACC) {
        throw SyntaxError::new ("expected '}' (not '" ~ end ~ "')", l_, c_);
    }
    
    i
}


/**
 * Internal function used to parse a value inside a lexer using the toml format
 * @example: 
 * ===============
 * let str = "'test'";
 * let dmut lex = Lexer::new (str, tokens-> TomlTokens);
 * let i : &Config = parseValue (alias lex);
 * match i {
 *      Str (str:_)=> assert (str == "test");
 * }
 * ===============
 */
prv def parseValue (dmut lex : &Lexer)-> &Config    
    throws &SyntaxError
{
    let (begin, _, _) = lex:.nextNoConsume ();
    match begin {
        "{" => return parseDict (alias lex, false);
        "[" => return parseArray (alias lex);
        "'" | "\"" => return parseString (alias lex);
        "false" => {
            lex:.next (); 
            return Bool::new (false);
        }
        "true" => {
            lex:.next ();
            return Bool::new (true);
        }
        _ => return parseInt (alias lex);
    }
}

