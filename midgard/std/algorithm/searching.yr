mod std.algorithm.searching;

/**
 * Check if all the elements verify PRED
 * Example : 
 * ---------
 * assert( all!((a) => (a & 1) != 0) ([1, 3, 5, 7, 9]));
 * assert(!all!((a) => (a & 1) != 0)([1, 2, 3, 5, 7, 9]));
 * ---------
 * Complexity : O (a.len)
 */
def all (PRED : C, C, T) (const a : [T]) -> bool {
    for i in a {
        if !PRED (i) {return false;}
    }
    return true;
}

/**
 * Check if any of the elements verify PRED
 * Example : 
 * ---------
 * assert ( any!((a) => a < 2) ([1, 2, 3]));
 * assert (!any!((a) => a < 2) ([2, 3]));
 * ---------
*/
def any (PRED : C, C, T) (const a : [T]) -> bool {
    for i in a {
        if PRED (i) {return true;}
    }
    return false;
}

/**
 * Returns: the common prefix of two arrays
 * It returns a range of the first array
 * Example: 
 * --------
 * let a = "Hello world !".dup (), b = "Hello there".dup ();
 * let c = commonPrefix (a, b); // "Hello ";
 * c [0] = 'W'; 
 * assert (a == "Wello world !");
 * --------
 */
def commonPrefix (T of [U], U) (a : const T, b : const T) -> [const U] {
    import core.array, std.algorithm.comparison, core.io;
    let ret = a [0UL .. min (a.len, b.len)];
    for it in 0UL .. min (a.len, b.len) {
        if a [it] != b [it]
            return a [0UL .. it].to!T;
    }

    return ret.to!T;
}

/**
 * Returns: the common prefix of two arrays
 * It returns a range of the first array
 * Example: 
 * --------
 * let a = "Hello world !".dup (), b = "Hello there".dup ();
 * let c = commonPrefix (a, b); // "Hello ";
 * c [0] = 'W'; 
 * assert (a == "Wello world !");
 * --------
 */
def commonPrefix (T of [U], U) (a : T, b : T) -> [mut U] {
    import core.array, std.algorithm.comparison, core.io;
    let ret = a [0UL .. min (a.len, b.len)];
    for it in 0UL .. min (a.len, b.len) {
        if a [it] != b [it]
            return a [0UL .. it].to!T;
    }

    return ret.to!T;
}

