mod std::algorithm::iteration;

import std::collection::seq;

/**
 * Iterates over a slice and call F on each elements
 * @params: 
 *   - a: a slice to traverse
 * @example: 
 * ===========
 * let a = [1, 2, 3];
 * a.each!(|x| println (x)) ();
 * ===========
 */
pub def each (F : fn (U)-> void, T of [U], U) (a : T) {
    for i in a {
        F (i);
    }
}

/**
 * Iterates over a sequence and call F on each elements
 * @params: 
 *   - a: a sequence to traverse
 * @example: 
 * ===========
 * let a = [1, 2, 3];
 * a.each!(|x| println (x)) ();
 * ===========
 */
pub def each (F : fn (U)-> void, T impl Seq!U, U) (a : T) {
    for i in a {
        match i {
            Ok (x:_) => 
                F (x);
        }
    }
}
