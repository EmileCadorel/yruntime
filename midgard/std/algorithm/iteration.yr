import std.traits;

def scan if (isCollection!T) (FUN : C, C, T) (const a : T) -> T {
    let b = [T ; new a.len];
    if b.len == 0UL return b;
    b [0] = a [0];
    for it in 1UL .. a.len {
        b [it] = FUN (b [it - 1UL], a [it]);
    }
    return b;
}

def each if (isCollection!T) (FUN : C, C, T) (const a : T) -> void {
    for it in a
        FUN (it);
}

def filter if (isCollection!T) (FUN : C, C, T) (const a : T) -> T {
    let b = [T ; new 0UL];
    for it in 0UL .. a.len {
        if FUN (a [it])
            b = b ~ [a [it]]; 
    }
    return b;
}

def map if (isCollection!T) (FUN : C, C, T) (const a : T) {
    let b = [typeof (mut FUN (a [0])) ; new a.len];    
    for it in 0UL .. a.len {
        b [it] = FUN (a [it]);
    }
    return b;    
}

def fold if (isCollection!T) (FUN : C, C, T) (a : const T) {
    if a.len == 0UL
        return T::init;
    else {
        let b = a [0];
        for it in 1UL .. a.len {
            b = FUN (a [it], b);
        }
        return b;
    }
}

