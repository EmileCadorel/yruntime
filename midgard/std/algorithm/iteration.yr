import std.traits;

def scan (FUN : C, C, T) (const a : [const T]) -> [T] {
    let b = [T ; a.len];
    if b.len == 0UL return b;
    b [0] = a [0];
    for it in 1UL .. a.len {
        b [it] = FUN (b [it - 1UL], a [it]);
    }
    return b;
}

def scan (FUN : C, C, T, N : u64) (ref a : const [const T ; N]) -> [T] {
    let b = [T ; a.len];
    if b.len == 0UL return b;
    b [0] = a [0];
    for it in 1UL .. a.len {
        b [it] = FUN (b [it - 1UL], a [it]);
    }
    return b;
}

def each (FUN : C, C, T) (const a : [const T]) -> void {
    for it in a
        FUN (it);
}

def each (FUN : C, C, T, N : u64) (ref a : const [const T ; N]) -> void {
    for it in 0UL .. a.len
        FUN (a [it]);
}

def filter (FUN : C, C, T) (const a : [const T]) -> [T] {
    let b = [T ; 0UL];
    for it in 0UL .. a.len {
        if FUN (a [it])
            b = b ~ [a [it]]; 
    }
    return b;
}

def filter (FUN : C, C, T, N : u64) (ref a : const [const T ; N]) -> [T] {
    let b = [T ; 0UL];
    for it in 0UL .. a.len {
        if FUN (a [it])
            b = b ~ [a [it]]; 
    }
    return b;
}

def map (FUN : C, C, T) (const a : [const T]) {
    let b = [typeof (mut FUN (a [0])) ; a.len];    
    for it in 0UL .. a.len {
        b [it] = FUN (a [it]);
    }
    return b;    
}

def map (FUN : C, C, T, N : u64) (ref a : const [const T ; N]) {
    let b = [typeof (mut FUN (a [0])) ; a.len];    
    for it in 0UL .. a.len {
        b [it] = FUN (a [it]);
    }
    return b;    
}

def fold (FUN : C, C, T) (a : const [const T]) -> T {
    if a.len == 0UL
        return T::init;
    else {
        let b = a [0];
        for it in 1UL .. a.len {
            b = FUN (a [it], b);
        }
        return b;
    }
}

def fold (FUN : C, C, T, N : u64) (ref a : const [const T ; N]) -> T {
    if a.len == 0UL
        return T::init;
    else {
        let b = a [0];
        for it in 1UL .. a.len {
            b = FUN (a [it], b);
        }
        return b;
    }
}

