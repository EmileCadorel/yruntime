mod std::algorithm::iteration
    
import std::traits;
import std::memory;

pub {
           
    def map (FUN : fn (U) -> T, C of [U], U, T) (a : C) -> mut [mut T] {
        let mut b : [mut T] = alias allocArray!T (a.len);
        for it in 0_u64 .. b.len {
            cte if (is!T (X of [J], J)) 
                b [it] = alias FUN (a [it])
            else
                b [it] = FUN (a [it])
        }
        alias b
    }
    
    def scan (FUN : fn (U, U)-> U, C of [U], U) (a : C) -> mut [mut U] {
        let mut b : [mut U] = alias [U::init ; new a.len];
        if b.len != 0_u64 {
            b [0] = a [0];
            for i in 1_u64 .. a.len {
                b [i] = FUN (b [i - 1_u64], a [i])
            }
        }
        alias b
    }

    def each (FUN : fn (U)-> void, C of [U], U) (a : C) -> void {
        for i in a
            FUN (i)
    }

    def fold (FUN : fn (U, U)-> U, C of [U], U) (a : C) -> U {
        if a.len == 1_u64
            a [0]
        else {
            let len_2 = a.len / 2_u64;            
            FUN (fold (a[0_u64..len_2]), fold (a[len_2 .. a.len]))
        }
    }
    
}

