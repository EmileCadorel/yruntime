mod std.conv;

import core.io;
import std.abort;
import std.c.string;
import std.traits;

def to (T of string) (c : char) -> mut string {
    return [c];
}

def to (T of string) (const a : p!char) -> mut string {
    if (a is null || *a == 0UB) return [char; 0U];
    let ret = [char ; new strlen (a)];
    let b = a, it = 0U;
    while *b != '\0' {
        ret [it] = *b;
        b = b + 1U;
        it ++;
    }
    return ret;
}

def to if (isSigned!T2) (T of string, T2) (elem : T2) -> string {
    if (elem < 0) return "-" ~ to!string (-elem);
    else if (elem == 0) return "0";
    let nb = elem, size = 0UL;
    while nb > 0 {
        nb /= cast!T2 (10B);
        size ++;
    }
    let res = [char ; new size];
    for it in 0UL .. size {
        res [size - it - 1UL] = cast!char (elem % cast!T2 (10B)) + '0';
        elem /= cast!T2 (10B);
    }
    return cast!string (res);
}

def to if (isIntegral!T) (T) (elem : const string) -> T
{
    let res = T::init;//cast!T(elem[elem.len - 1u] - '0');
    let i = cast!i32 (elem.len) - 1;
    let mul = cast!T (1);

    while i >= 0 {
        assert ((elem [i] >= '0' && elem [i] <= '9') || elem[i] == ' ', elem ~ " is not integral");
        if elem [i] != ' ' {
            res += cast!T(elem[i] - '0') * mul;
            mul *= cast!T(10);
        }
        i--;
    }
    return res;
}



