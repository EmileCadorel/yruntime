// mod std.bigint;

// extern (C) __gmpz_init (ref a : mpz_t);
// extern (C) __gmpz_init_set_str (ref a : mpz_t, c : const p!char, i : i32);
// extern (C) __gmpz_init_set_ui (ref a : mpz_t, i : u64);
// extern (C) __gmpz_init_set_si (ref a : mpz_t, i : i64);
// extern (C) __gmpz_init_set_d (ref a : mpz_t, i : f64);


// extern (C) __gmpz_add (ref res : mpz_t, ref a : mpz_t, ref b : mpz_t);
// extern (C) __gmpz_add_ui (ref res : mpz_t, ref a : mpz_t, ref b : u64);

// extern (C) __gmpz_sub (ref res : mpz_t, ref a : mpz_t, ref b : mpz_t);
// extern (C) __gmpz_sub_ui (ref res : mpz_t, ref a : mpz_t, ref b : u64);
// extern (C) __gmpz_ui_sub (ref res : mpz_t, ref b : u64, ref a : mpz_t);

// extern (C) __gmpz_mul (ref res : mpz_t, ref a : mpz_t, ref b : mpz_t);
// extern (C) __gmpz_mul_ui (ref res : mpz_t, ref a : mpz_t, ref b : u64);
// extern (C) __gmpz_mul_si (ref res : mpz_t, ref a : mpz_t, ref b : i64);

// extern (C) __gmpz_neg (ref res : mpz_t, ref a : mpz_t);
// extern (C) __gmpz_abs (ref res : mpz_t, ref a : mpz_t);

// extern (C) __gmp_printf (const a : p!char, ref b : mpz_t, ...);

// struct
// | mp_alloc : i32
// | mp_size : i32
// | mp_d : u64
//  -> mpz_t;

// def BigNum () -> mpz_t {
//     let ret = mpz_t::init;
//     __gmpz_init (ret);
//     return ret;
// }

// def BigNum (i : i64) -> mpz_t {
//     let ret = mpz_t::init;
//     __gmpz_init_set_si (ret, i);
//     return ret;
// }

// def BigNum (i : string, base : i32) -> mpz_t {
//     let ret = mpz_t::init;
//     __gmpz_init_set_str (ret, i.ptr, base);
//     return ret;
// }

// def BigNum (d : f64) -> mpz_t {
//     let ret = mpz_t::init;
//     __gmpz_init_set_d (ret, d);
//     return ret;
// }

// def opBinary if (is (T : mpz_t) || is (T2 : mpz_t)) ("+", T, T2) (a : T, b : T2) -> mpz_t {
//     cte if (is (T : mpz_t) && is (T2 : mpz_t)) {
//         let ret = BigNum ();
//         __gmpz_add (ret, a, b);
//         return ret;
//     } else if (is (T : mpz_t)) {
//         let ret = BigNum ();
//         __gmpz_add_ui (ret, a, b);
//         return ret;
//     } else if (is (T2 : mpz_t)) {
//         let ret = BigNum ();
//         __gmpz_add_ui (ret, b, a);
//         return ret;
//     }
// }

// def opBinary if (is (T : mpz_t) || is (T2 : mpz_t)) ("-", T, T2) (a : T, b : T2) -> mpz_t {
//     cte if (is (T : mpz_t) && is (T2 : mpz_t)) {
//         let ret = BigNum ();
//         __gmpz_sub (ret, a, b);
//         return ret;
//     } else if (is (T : mpz_t)) {
//         let ret = BigNum ();
//         __gmpz_sub_ui (ret, a, b);
//         return ret;
//     } else if (is (T2 : mpz_t)) {
//         let ret = BigNum ();
//         __gmpz_ui_sub (ret, a, b);
//         return ret;
//     }
// }

// def opBinary if (is (T : mpz_t) || is (T2 : mpz_t)) ("*", T, T2) (a : T, b : T2) -> mpz_t {
//     cte if (is (T : mpz_t) && is (T2 : mpz_t)) {
//         let ret = BigNum ();
//         __gmpz_mul (ret, a, b);
//         return ret;
//     } else if (is (T : mpz_t)) {
//         let ret = BigNum ();
//         __gmpz_mul_ui (ret, a, b);
//         return ret;
//     } else if (is (T2 : mpz_t)) {
//         let ret = BigNum ();
//         __gmpz_mul_ui (ret, b, a);
//         return ret;
//     }
// }

// def opUnary ("-") (a : mpz_t) {
//     let ret = BigNum ();
//     __gmpz_neg (ret, a);
//     return ret;
// }

// def print (a : mpz_t) {
//     __gmp_printf ("%Zd".ptr, a);
// }







