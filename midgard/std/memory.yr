mod std::memory;

extern (C) def GC_malloc (size : usize) -> &(void);

mod allocMod (T) {
    extern (C) def _yrt_new_array (_ : usize, _ : u64)-> mut [mut T];
}

pub def alloc (T) (a : T) -> & (T) {
    let mut x : mut &(mut T) = cast!(mut &(mut T)) (GC_malloc (sizeof T));
    *x = a;
    return x;
}
    
pub def allocBlock (T) (len : u64) -> &T {
    return cast!(&T) (GC_malloc (sizeof (T) *:usize len));
}

pub def allocArray (T) (len : u64) -> mut [mut T] {
    alias allocMod!(T)::_yrt_new_array (sizeof T, len)
}


