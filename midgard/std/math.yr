mod std::math;
import std::traits;

/**
 * List of constants that are useful when doing maths
 */
pub enum 
| E          = 2.71828182845904523542816810799394
| LOG2T      = 3.32192809488736234780834055690946
| LOG2E      = 1.44269504088896340738765178279834
| LOG2       = 0.30102999566398119522564642835949
| LOG10E     = 0.43429448190325182764547941316469
| LN2        = 0.69314718055994530942869047418498
| LN10       = 2.30258509299404568403633886131132
| PI         = 3.14159265358979323851280895940619
| PI_2       = 1.57079632679489661925640447970309
| PI_4       = 0.78539816339744830962820223985155
| M_1_PI     = 0.31830988618379067153817477131561
| M_2_PI     = 0.63661977236758134307634954263122
| M_2_SQRTPI = 1.12837916709551257384794992200128
| SQRT2      = 1.41421356237309504876378807303183
| SQRT1_2    = 0.70710678118654752438189403651592
 -> Math;

mod CMath {
    pub {
        extern (C) def fmod (x : f64, y : f64)-> f64;
        
        extern (C) def sqrt (f : f64)-> f64;
        extern (C) def sqrtf (f : f32)-> f32;
        
        extern (C) def cosf (a : f32) -> f32;
        extern (C) def sinf (a : f32) -> f32;
        extern (C) def tanf (a : f32) -> f32;

        extern (C) def acosf (a : f32) -> f32;
        extern (C) def asinf (a : f32) -> f32;
        extern (C) def atanf (a : f32) -> f32;

        extern (C) def cos (a : f64) -> f64;
        extern (C) def sin (a : f64) -> f64;
        extern (C) def tan (a : f64) -> f64;

        extern (C) def acos (a : f64) -> f64;
        extern (C) def asin (a : f64) -> f64;
        extern (C) def atan (a : f64) -> f64;
    }
}

pub {

    /**
     * Calculate the absolute value of a number
     */
    def if (isSigned!NUM || isFloating!NUM) abs (NUM) (x : NUM) -> NUM {
        cte if isFloating!NUM {
            if (x < cast!NUM (0.0f)) {
                -x
            } else x
        } else {
            if (x < cast!NUM (0)) {
                -x
            } else x
        }
    }

    /**
     * Calculate the square root of a number 
     */
    def if (isFloating!NUM) sqrt (NUM) (x : NUM) -> NUM {
        cte if (is!(NUM) (X of f64)) {
            CMath::sqrt (x)
        } else
            CMath::sqrtf (x)
    }

    def if (isFloating!NUM) cos (NUM) (x : NUM) -> NUM {
        cte if (is!(NUM) (X of f64)) {
            CMath::cos (x)
        } else
            CMath::cos (x)
    }    

    def pow (x : f64, y : i32) -> f64 {
        if (y == 0) return 1.;
        
        let temp = pow (x, y / 2);
        if y % 2 == 0 {
            temp * temp
        } else if y > 0 {
            x * temp * temp
        } else
            (temp * temp) / x        
    }

    extern (C) def floor (x : f64) -> f64;



}
