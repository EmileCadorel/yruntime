mod std::c::thread;

pub struct
| data : [u8 ; 40_u64]
 -> _yrt_thread_mutex_t;

pub struct
| data : [u8 ; 48_u64]
 -> _yrt_thread_cond_t;

pub struct
| data : [u8; 32_u64]
 -> _yrt_thread_barrier_t;

pub struct
| data : [u8; 32_u64]
 -> sem_t;


pub mod _yrt_thread (T) {
    pub extern (C) def _yrt_thread_create (thread : &u64, attr : &void, call : fn (&T)-> &void, data : &T);
}

pub extern (C) def _yrt_thread_create (thread : &u64, attr : &void, call : fn (&void)-> &void, data : &void);
pub extern (C) def _yrt_thread_join (th : u64, a : &(&(void)));
pub extern (C) def _yrt_thread_exit (a : i32);
pub extern (C) def _yrt_thread_self ()-> u64;

/**
 * =======
 *  MUTEX
 * =======
*/
pub extern (C) def _yrt_thread_mutex_init (lock : &_yrt_thread_mutex_t , attr: &void)-> i32;

pub extern (C) def _yrt_thread_mutex_destroy (lock : &_yrt_thread_mutex_t)-> i32;
pub extern (C) def _yrt_thread_mutex_trylock (lock : &_yrt_thread_mutex_t)-> i32;

pub extern (C) def _yrt_thread_mutex_lock (mutex : &_yrt_thread_mutex_t)-> i32;
pub extern (C) def _yrt_thread_mutex_unlock (mutex : &_yrt_thread_mutex_t)-> i32; 

/**
 * ====== 
 *  COND
 * ======
*/

pub extern (C) def _yrt_thread_cond_init (cond : &_yrt_thread_cond_t, attr: &void)-> i32;
pub extern (C) def _yrt_thread_cond_wait (cond : &_yrt_thread_cond_t, lock : &_yrt_thread_mutex_t)-> i32;
pub extern (C) def _yrt_thread_cond_signal (cond : &_yrt_thread_cond_t)-> i32;
pub extern (C) def _yrt_thread_cond_broadcast (cond : &_yrt_thread_cond_t)-> i32;


/**
 * =========
 *  BARRIER
 * =========
*/    

pub extern (C) def _yrt_thread_barrier_init (barr : &_yrt_thread_barrier_t, attr: &void, nb : u32)-> i32;
pub extern (C) def _yrt_thread_barrier_wait (barr : &_yrt_thread_barrier_t);
pub extern (C) def _yrt_thread_barrier_destroy (barr : &_yrt_thread_barrier_t);

pub extern (C) def _yrt_thread_sem_init (s : &sem_t, pshared : i32, value : i32);
pub extern (C) def _yrt_thread_sem_destroy (s : &sem_t);
pub extern (C) def _yrt_thread_sem_wait (s : &sem_t);
pub extern (C) def _yrt_thread_sem_post (s : &sem_t);
