mod std::c::socket;


alias TCP_KEEPIDLE = 4;
alias TCP_KEEPINTVL = 5;
alias SOMAXCONN = 128;
alias SOCK_RDM = 4;


 enum : u32
| MSG_CTRUNC      = 0x0800_u32
| MSG_DONTROUTE   = 0x0400_u32
| MSG_EOR         = 0x8000_u32
| MSG_OOB         = 0x0100_u32
| MSG_PEEK        = 0x0200_u32
| MSG_TRUNC       = 0x2000_u32
| MSG_WAITALL     = 0x1000_u32
| MSG_NOSIGNAL    = 0x4000_u32
 -> MsgCst;

enum
| SHUT_RD = 0
| SHUT_WR = 1
| SHUT_RDWR = 2
 -> ShutCst;


pub enum
| SOCK_DGRAM      = 2
| SOCK_SEQPACKET  = 5
| SOCK_STREAM     = 1
| SOL_SOCKET      = 1
| SO_ACCEPTCONN   = 30
| SO_BROADCAST    = 6
| SO_DEBUG        = 1
| SO_DONTROUTE    = 5
| SO_ERROR        = 4
| SO_KEEPALIVE    = 9
| SO_LINGER       = 13
| SO_OOBINLINE    = 10
| SO_RCVBUF       = 8
| SO_RCVLOWAT     = 18
| SO_RCVTIMEO     = 20
| SO_REUSEADDR    = 2
| SO_SNDBUF       = 7
| SO_SNDLOWAT     = 19
| SO_SNDTIMEO     = 21
| SO_TYPE         = 3
 -> SockCst;
    
pub enum
| AF_APPLETALK    = 5
| AF_INET         = 2
| AF_INET6        = 10
| AF_IPX          = 4
| AF_UNIX         = 1
| AF_UNSPEC       = 0
| PF_APPLETALK    = 5
| PF_IPX          = 4
 -> AFCst;

pub enum
| UNSPEC =     AFCst::AF_UNSPEC     /// Unspecified address family
| UNIX =       AFCst::AF_UNIX       /// Local communication
| INET =       AFCst::AF_INET       /// Internet Protocol version 4
| IPX =        AFCst::AF_IPX        /// Novell IPX
| APPLETALK =  AFCst::AF_APPLETALK  /// AppleTalk
| INET6 =      AFCst::AF_INET6      /// Internet Protocol version 6
 -> AddrFamily;

/* TODO : complete this enum by using socket.h */
pub enum : i32
| SOCK_STREAM    = 1  /* stream (connection) socket) */
| SOCK_DGRAM     = 2  /* datagram (conn.less) socket */
| SOCK_RAW       = 3  /* raw socket		    */
| SOCK_RDM       = 4  /* reliably-delivered message  */
| SOCK_SEQ_PACKET = 5  /* sequential packet socket    */
| SOCK_PACKET    = 10 /* see socket.h                */
 -> SocketType;

pub enum : u32
| IN_ADDR_ANY = 0_u32 /* linux/in.h */
// | InAddrBroadcast : 0xffffffffU
 -> AddrType;

/* TODO : complete the enum by using in.h */
pub enum : i32
| Ip   = 0
| Icmp = 1
| Igmp = 2
| Ipip = 4
| Tcp  = 6
| Egp  = 8
| Pup  = 12
| Udp  = 17
| Ipv6 = 41
| Raw  = 255
 -> IpProtocol;

pub struct
| sin_family : i16
| sin_port : u16
| sin_addr : InAddr
| sin_zero : [u8 ; 8_u32]
 -> SockAddrIn;

pub struct
| sa_family : u16
| sa_data : [u8 ; 14_u32]
 -> SockAddr;

pub struct
| handle : i32
| addrFamily : AddrFamily
| sockType : SocketType
 -> Socket;

pub struct
| s_addr : u32
 -> InAddr;

pub mod C {    
    pub {
        extern (C) def accept (x : i32, addr : &SockAddr, len : &u32) -> i32;
        extern (C) def accept (x : i32, addr : &SockAddrIn, len : &u32) -> i32;
        extern (C) def bind (x : i32, addr : &SockAddr, len : u32)-> i32;
        extern (C) def bind (x : i32, addr : &SockAddrIn, len : u32)-> i32;
        extern (C) def connect (x : i32, addr : &SockAddr, len : u32)-> i32;
        extern (C) def connect (x : i32, addr : &SockAddrIn, len : u32)-> i32;
        extern (C) def getpeername (x : i32, addr : &SockAddr, len : &u32)-> i32;
        extern (C) def getsockname(x : i32, addr : &SockAddr, len : &u32)-> i32;
        extern (C) def getsockopt(x : i32, y : i32, z : i32, w : &void, len : &u32)-> i32;
        extern (C) def listen(x : i32, y : i32)-> i32;
        extern (C) def recv (x : i32, y : &void, z : u32, w : i32)-> u32;
        
        extern (C) def recvfrom(x : i32, y : &void, z : u32, w : i32, v : &SockAddr, u : u32)-> u32;
        extern (C) def send(x : i32,  y : &void, size : u32, z : i32)-> u32;
        extern (C) def read(x : i32, y : &(void), size : u32)-> i32;
        
        extern (C) def sendto(x : i32, y : &void, size : u32, z : i32, addr : &SockAddr, len : u32)-> u32;
        extern (C) def setsockopt(x : i32, y : i32, z : i32, w : &void, len : u32)-> u32;
        extern (C) def shutdown(x : i32, y : i32)-> i32;
        extern (C) def socket(x : i32, y : i32, z : i32)-> i32;
        extern (C) def sockatmark(x : i32)-> i32;
        extern (C) def socketpair(x : i32, y : i32, z : i32, ref w : [i32; 2_u32])-> i32;
        extern (C) def close (fd : i32)-> i32;
    }
}

