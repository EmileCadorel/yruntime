mod std::time::dur;
import std::stream;

import core::object;
import std::traits;

/**
 * Class representing a duration of time of weeks or less.
 */
pub class @final Duration {
    
    pub let negative : bool;
    pub let sec : u64;
    pub let usec : u64;
    
    pub self (sec : u64, usec : u64, negative : bool = false)
        with sec = sec, usec = usec, negative = negative
    {}

    /**
     * Create a new duration with given values
     * @example: 
     * ================
     * let d = Duration::new (w-> 1u64, d-> 2u64, h-> 3u64, ms-> 89u64);
     * assert (d.to![c8] () == "1w2d3h89ms"s8);
     *
     * let d2 = Duration::new (d-> 6u64, h-> 23u64, m-> 59u64, s-> 59u64, ms-> 999u64, us-> 999u64);
     * assert ((d2 + dur::micros (1u64)).to![c8] () == "1w"s8);
     * ================
     */
    pub self (w : u64 = 0u64, d : u64 = 0u64, h : u64 = 0u64, m : u64 = 0u64, s : u64 = 0u64, ms : u64 = 0u64, us : u64 = 0u64) with
        sec = (w * 7u64 * 24u64 * 3_600u64) + (d * 24u64 * 3_600u64) + (h * 3_600u64) + (m * 60u64) + s,
        usec = (ms * 1_000u64) + us,
        negative = false
    {}
    
    /**
     * @returns: the number of weeks in the duration 
     * @example: 
     * ================
     * let x = dur::days (89u64);
     * assert (x.weeks () == 12u64)
     * ================
     */
    pub def weeks (self)-> u64 {
        self.sec / (7u64 * 24u64 * 3_600u64)
    }

    /**
     * @returns: the number of days in the duration 
     * @example: 
     * ================
     * let x = dur::days (89u64);
     * assert (x.days () == 5u64)
     * assert (x.days (all-> true) == 89u64)
     * ================
     */
    pub def days (self, all : bool = false)-> u64 {
        if (all) {
            self.sec / (24u64 * 3_600u64)
        } else {
            self.sec / (24u64 * 3_600u64) % (7u64)
        }
    }

    /**
     * @returns: the number of hours in the duration 
     * @example: 
     * ================
     * let x = dur::hours (427u64);
     * assert (x.hours () == 5u64)
     * assert (x.hours (all-> true) == 5u64)
     * ================
     */
    pub def hours (self, all : bool = false)-> u64 {
        if (all) {
            self.sec / (3_600u64)
        } else {
            self.sec / (3_600u64) % (24u64)
        }
    }

    /**
     * @returns: the number of minutes in the duration 
     * @example: 
     * ================
     * let x = dur::minutes (478u64);
     * assert (x.minutes () == 58u64)
     * assert (x.minutes (all-> true) == 478u64)
     * ================
     */
    pub def minutes (self, all : bool = false)-> u64 {
        if (all) {
            self.sec / (60u64)
        } else {
            self.sec / (60u64) % (60u64)
        }
    }

    /**
     * @returns: the number of seconds in the duration 
     * @example: 
     * ================
     * let x = dur::minutes (120u64);
     * assert (x.seconds () == 0u64)
     * assert (x.seconds (all-> true) == 7200u64)
     * ================
     */
    pub def seconds (self, all : bool = false)-> u64 {
        if (all) {
            self.sec 
        } else {
            self.sec % (60u64)
        }
    }

    /**
     * @returns: the number of milliseconds in the duration 
     * @example: 
     * ================
     * let x = dur::minutes (59u64);
     * assert (x.millis () == 0u64)
     * assert (x.millis (all-> true) == 7200_000u64)
     * ================
     * @warning: For capacity of u64 representation, if all is true, only the seconds, minutes, hours and days will be added (weeks will be omitted)
     */
    pub def millis (self, all : bool = false)-> u64 {
        if (all) {
            (self.usec + (1_000_000u64 * (self.sec % (7u64 * 24u64 * 3_600u64)))) / 1_000u64
        } else {
            self.usec / 1_000u64 % (1_000u64)
        }
    }

    /**
     * @returns: the number of microseconds in the duration 
     * @example: 
     * ================
     * let x = dur::minutes (59u64);
     * assert (x.micros () == 0u64)
     * assert (x.micros (all-> true) == 7200_000u64)
     * 
     * let d = Duration::new (d-> 6u64, h-> 23u64, m-> 59u64, s-> 59u64, ms-> 999u64, us-> 999u64);
     * assert (d.micros (all-> true) == 604799999999u64);
     * assert ((d + dur::micros (1u64)).micros (all-> true) == 0u64);
     * ================
     * @warning: For capacity of u64 representation, if all is true, only the seconds, minutes, hours and days will be added (weeks will be omitted)
     */
    pub def micros (self, all : bool = false)-> u64 {
        if (all) {
            let x = self.sec % (7u64 * 24u64 * 3_600u64);
            self.usec + (1_000_000u64 * (x))
        } else {
            self.usec  % (1_000u64)
        }
    }
    
    
    /**
     * Addition of two durations
     * @example: 
     * ================
     * let x = dur::seconds (2u64) + dur::millis (300ms);
     * assert (x.to![c8] () == "2s300ms"s8);
     * ================
     */
    pub def opBinary {"+"} (self, right : &Duration)-> &Duration {
        if (right.negative) {
            self.opBinary!"-" (Duration::new (right.sec, right.usec))
        } else if (self.negative) {
            right.opBinary!"-" (Duration::new (self.sec, self.usec))
        } else if (self.usec + right.usec >= 1_000_000u64) {
            let usec = (self.usec + right.usec) ;
            Duration::new (self.sec + right.sec + (usec / 1_000_000u64), usec % 1_000_000u64)
        } else {
            Duration::new (self.sec + right.sec, self.usec + right.usec)
        }
    }

    /**
     * Substraction of two durations
     * @example: 
     * ================
     * let x = dur::seconds (2u64) - dur::millis (300ms);
     * assert (x.to![c8] () == "1s700ms"s8);
     * ================
     */
    pub def opBinary {"-"} (self, right : &Duration, negative : bool = false)-> &Duration {
        if (right.negative) { // a -- b -> a + b
            self.opBinary!{"+"} (Duration::new (right.sec, right.usec))
        } else if (self.negative) { // -a - b -> - (a + b)
            let res = Duration::new (self.sec, self.usec).opBinary!"+" (right);
            Duration::new (negative-> !res.negative, res.sec, res.usec)
        } else {
            if (self.sec < right.sec) {
                return right.opBinary!{"-"} (self, negative-> true);
            }
            
            if (self.usec >= right.usec) {
                Duration::new (negative-> negative, self.sec - right.sec, self.usec - right.usec)
            } else {
                if (self.sec == right.sec) {
                    right.opBinary!"-" (self, negative-> true)
                } else {
                    let usec = (right.usec - self.usec);
                    if (usec != 0u64) {
                        Duration::new (negative-> negative, self.sec - right.sec - 1u64, 1_000_000u64 - usec)
                    } else {
                        Duration::new (negative-> negative, self.sec - right.sec, 1_000_000u64 - usec)
                    }
                }
            }
        }
    }

    /**
     * @returns: the opposite value of self
     * @example: 
     * ===============    
     * let x = dur::seconds (2u64);
     * assert (-x.to![c8] () == "-2s"s8);
     * ===============
     */
    pub def opUnary {"-"} (self)-> &Duration {
        Duration::new (negative-> !self.negative, self.sec, self.usec)
    }

    /**
     * Compare two durations
     * @example: 
     * ===============
     * let start = dur::seconds (2u64);
     * let end = dur::seconds (1u64);
     * assert (start > end);
     * assert (start == start);
     * ===============
     */
    pub def opCmp (self, right : &Duration) -> i32 {
        if (right.negative == self.negative) {
            let v = { if (self.sec < right.sec) { -1 }
                      else if (self.sec == right.sec) {
                          if (self.usec < right.usec) { -1 }
                          else if (self.usec > right.usec) { 1 }
                          else { 0 }
                      }
                      else { 1 }
            }
            
            if (self.negative) { -v }
            else { v }
        } else {
            if (self.sec == right.sec && self.usec == right.usec) { 0 }
            else if (right.negative) { 1 }
            else { -1 }
        }
    }
    
    impl Streamable {
        pub over toStream (self, dmut stream : &StringStream)-> void {
            stream:.write (self.to![c8] ());
        }    
    }
    
}


/**
 * @returns: A duration of week weeks
 * @example: 
 * ====================
 * sleep ((2u64).dur::weeks ());
 * ====================
 */
pub def weeks (week : u64) -> &Duration {
    Duration::new (week * 7u64 * 24u64 * 3_600u64, 0u64)
}

/**
 * @returns: A duration of day days
 * @example: 
 * ====================
 * sleep ((2u64).dur::days ());
 * ====================
 */
pub def days (day : u64) -> &Duration {
    Duration::new (day * 24u64 * 3_600u64, 0u64)
}

/**
 * @returns: A duration of hou hours
 * @example: 
 * ====================
 * sleep ((2u64).dur::hours ());
 * ====================
 */
pub def hours (hou : u64) -> &Duration {
    Duration::new (hou * 3_600u64, 0u64)
}


/**
 * @returns: A duration of min minutes
 * @example: 
 * ====================
 * sleep ((2u64).dur::minutes ());
 * ====================
 */
pub def minutes (mins : u64) -> &Duration {
    Duration::new (mins * 60u64, 0u64)
}

/**
 * @returns: A duration of secs seconds
 * @example: 
 * ====================
 * sleep ((2u64).dur::seconds ());
 * ====================
 */
pub def seconds (secs : u64) -> &Duration {
    Duration::new (secs, 0u64)
}

/**
 * @returns: A duration of mil milliseconds
 * @example: 
 * ====================
 * sleep ((2_000u64).dur::millis ());
 * ====================
 */
pub def millis (mil : u64) -> &Duration {
    Duration::new (mil / 1_000u64, (mil % 1_000u64) * 1_000u64)
}

/**
 * @returns: A duration of mic microseconds
 * @example: 
 * ====================
 * sleep ((2_000_000u64).dur::micros ());
 * ====================
 */
pub def micros (mic : u64) -> &Duration {
    Duration::new (mic / 1_000_000u64, (mic % 1_000_000u64))
}

/**
 * Converts the Duration into a readable string
 * @example: 
 * ================
 * let d = dur::seconds (2u64) + dur::millis (300u64);
 * assert (d.to![c8] () == "2s300ms"s8);
 * ================
 */
pub def to {C of [U], U of c8, T of &Duration} (val : T)-> [c8] {
    import std::stream;
    let dmut stream = StringStream::new ();
    
    if (val.negative) stream:.write ("-"s8);
    if (val.weeks () != 0u64) {
        stream:.write (val.weeks ()):.write ("w"s8);
    }
    if (val.days () != 0u64) {
        stream:.write (val.days ()):.write ("d"s8);
    }
    if (val.hours () != 0u64) {
        stream:.write (val.hours ()):.write ("h"s8);
    }
    if (val.minutes () != 0u64) {
        stream:.write (val.minutes ()):.write ("m"s8);
    }    
    if (val.seconds () != 0u64) {
        stream:.write (val.seconds ()):.write ("s"s8);
    }    
    if (val.millis () != 0u64) {
        stream:.write (val.millis ()):.write ("ms"s8);
    }
    if (val.micros () != 0u64) {
        stream:.write (val.micros ()):.write ("µs"s8);
    }
    stream []
}

/**
 * Converts the Duration into a readable string
 * @example: 
 * ================
 * let d = dur::seconds (2u64) + dur::millis (300u64);
 * assert (d.to![c32] () == "2s300ms");
 * ================
 */
pub def if isChar!{U} () to {C of [U], U, T of &Duration} (val : T)-> [c32] {
    import std::conv;
    cte if is!{U}{X of c8} {
        val.to![c8] ()
    } else {
        val.to![c8] ().to![c32] ()
    }
}
