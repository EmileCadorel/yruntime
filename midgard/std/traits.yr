/**
 * Some basic knowledge on types, to simplify the template specializations
 * All the function define in this module can be used as cte values
 */
mod std::traits;

pub {

    /**
     * Cte check if it is an integral type
     * Templates : 
     * - T any type
     */
    def isIntegral (T) () -> bool {
        is!(T) (U of i32) || is!(T) (U of i64) || is!(T) (U of i16) || is!(T) (U of i8) ||
            is!(T) (U of u32) || is!(T) (U of u64) || is!(T) (U of u16) || is!(T) (U of u8)
    }

    /**
     * Cte check if it is an floating point type
     * Templates : 
     * - T any type
     */
    def isFloating (T) () -> bool {
        is!T (U of f64) || is!T (U of f32)
    }
    
    /**
     * Cte check if it is an floating point or a integral type
     * Templates : 
     * - T any type
     */    
    def isNumeric (T) ()-> bool {
        isIntegral!T || isFloating!T
    }

    /**
     * Cte check if it is an integral signed type
     * Templates : 
     * - T any type
     */    
    def isSigned (T) () -> bool {
        is!(T)(U of i32) || is!T (U of i64) || is!T (U of i16) || is!T (U of i8)
    }

    /**
     * Cte check if it is an integral unsigned type
     * Templates : 
     * - T any type
     */    
    def isUnsigned (T) () -> bool {
        is!T (U of u32) || is!T (U of u64) || is!T (U of u16) || is!T (U of u8)
    }

    /**
     * Cte check if it is a dynamic array type
     * Templates : 
     * - T any type
     */        
    def isDynamicArray (T) () -> bool {
        is!T (U of [V], V)
    }

    /**
     * Cte check if it is a static array type
     * Templates : 
     * - T any type
     */        
    def isStaticArray (T) () -> bool {
        is!T (U of [X;N], X, N : usize) 
    }

    /**
     * Cte check if it is a static array or a dynamic array type
     * Templates : 
     * - T any type
     */        
    def isArray (T) () -> bool {
        isDynamicArray!T || isStaticArray!T
    }
    
}
