mod core.array;
import std.abort;
import std.traits;

struct (T)
| len : u64
| ptr : p!T
 -> slice;

def print (T) (a : const (slice!(const T))) {
    let aux = const [T] {a.len, a.ptr};
    print (aux);
}

def opEquals (T) (const left : [T], const right : [T]) -> bool {
    if left.len != right.len
        return false;
    
    for it in 0UL .. left.len {
        if left [it] != right [it]
            return false;
    }
    return true;
}

def opIndex (T, T2) (a : const (slice!T),  i : T2) -> T {
    if i < a.len {
        return *(a.ptr + (cast!u64(i) * char::sizeof));
    } else {
        abort ();
        return *a.ptr;
    }
}

def opIndex (T, T2) (a : slice!T,  i : u32) -> ref T {
    if i < a.len {
        return *(a.ptr + (cast!u64 (i) * char::sizeof));
    } else {
        abort ();
        return *a.ptr;
    }
}

def opIndex (T2, T) (a : [T2], i : r!(T)) -> mut slice!T2 {
    if i.scd >= i.fst && (i.scd - i.fst) <= a.len && i.fst <= a.len {
        return slice!T2 {cast!u64 (i.scd - i.fst), a.ptr + i.fst};
    } else {
        abort ();
        return slice!T2 {0UL, null};
    }
}

def opIndex (T2, T) (a : const [T2], i : r!(T)) -> slice!T2 {
    if i.scd >= i.fst && (i.scd - i.fst) <= a.len && i.fst <= a.len {
        return const (slice!T2) {cast!u64 (i.scd - i.fst), a.ptr + i.fst};
    } else {
        abort ();
        return const (slice!T2) {0UL, null};
    }
}

def opIndex (T) (a : [T]) -> mut slice!T {
    return slice!T {a.len, a.ptr};
}

def opIndex (T) (const a : [T]) -> slice!T {
    return const (slice!T) {a.len, a.ptr};
}

def replicate (T) (const array : [T], ntimes : u64) -> mut [T]{
    let res = [T ; array.len * cast!u64 (ntimes)];
    for i in 0U .. ntimes {
        for j in 0U .. array.len {
            res [i * array.len + j] = array [j];
        }
    }
    return res;
}

def dup (T) (const array : [const T]) -> mut [T] {
    let res = [T ; array.len];
    for it in 0U .. array.len {
        res [it] = array [it];
    }
    return res;
}

def dup (T, N : u64) (ref array : const ([const T ; N])) -> mut [T] {
    let res = [T ; array.len];
    for it in 0U .. array.len {
        res [it] = array [it];
    }
    return res;
}

def dup (T) (const array : slice!T) -> mut [T] {
    let res = [T ; array.len];
    for it in 0U .. array.len {
        res [it] = array [it];
    }
    return res;
}
