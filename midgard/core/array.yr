mod core::array;
import core::exception, core::typeinfo;
import std::io;

mod allocMod {T} {
    pub extern (C) def _yrt_new_array (_ : usize, _ : u64)-> mut [mut T];
}

pub class OutOfArray over Exception {
    pub self () {}

    impl std::io::Printable {
        pub over print (self) {
            self::super.print ();
        }
    }
}

pub def outOfArray ()
    throws &OutOfArray
{
    throw OutOfArray::new ();
}


pub def opCmp {T of [U], U} (a : T, b : T)-> i32 {
    let dmut len = if (b.len < a.len) {b.len} else {a.len};
    for i in 0u64 .. len {
        if (a [i] < b[i]) return -1;
        else if (a[i] > b[i]) return 1;
    }
    
    cast!(i32) (a.len - b.len)
} catch {
    _ : &OutOfArray => { 0 }
}


pub macro str {
    pub self (fst=(__char)*) {
        "#(fst)"
    }
}
