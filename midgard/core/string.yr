mod core.string;

import std.abort;
public import core.array;

def opAssign ("=") (a : slice!(char), const b : string) -> mut slice!char {
    if a.len != b.len {
        //println (("Array lengths don't match for copy: ", a.len, " != ", b.len));
        abort ();
    }

    for it in 0U .. a.len {
        a [it] = b [it];
    }
    
    return a;
}

def dup (const array : string) -> mut string {
    extern (C) GC_malloc (len : u64) -> mut p!char;
    let res = [char] {array.len, GC_malloc (array.len)};
    for it in 0U .. array.len {
        res [it] = array [it];
    }
    return res;
}

def opEquals (const left : string, const right : slice!char) -> bool {
    if left.len != right.len
        return false;

    for it in 0UL .. left.len {
        if left [it] != right [it] 
            return false;
    }
    return true;
}

def opEquals (const left : slice!char, const right : slice!char) -> bool {
    if left.len != right.len
        return false;
    
    for it in 0UL .. left.len {
        if left [it] != right [it]
            return false;
    }
    return true;
}

def opTest (op : string) (const left : string, const right : string) -> i32 {
    let min = left.len;
    if right.len < min {
        min = right.len;
    }
    
    for it in 0U .. min {    
        if left [it] != right [it] {
            if left [it] < right [it]  return -1;
            else return 1;
        }
    }
    
    return 0;
}

def opTest (op : string) (const left : string, const right : slice!(char)) -> i32 {
    let min = left.len;
    if right.len < min {
        min = right.len;
    }
    
    for it in 0U .. min {    
        if left [it] != right [it] {
            if left [it] < right [it]  return -1;
            else return 1;
        }
    }
    
    return 0;
}

def opTest (op : string) (const left : slice!(char), const right : slice!(char)) -> i32 {
    let min = left.len;
    if right.len < min {
        min = right.len;
    }
    
    for it in 0U .. min {    
        if left [it] != right [it] {
            if left [it] < right [it]  return -1;
            else return 1;
        }
    }
    
    return 0;
}

def opTest (op : string) (const left : slice!(char), const right : string) -> i32 {
    let min = left.len;
    if right.len < min {
        min = right.len;
    }
    
    for it in 0U .. min {    
        if left [it] != right [it] {
            if left [it] < right [it]  return -1;
            else return 1;
        }
    }
    
    return 0;
}
