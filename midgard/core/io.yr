mod core.io;
import std.traits;

extern (C) putchar (const c : char);
extern (C) printf (const c : p!char, ...);
extern (C) scanf (const c : p!char, ...);

def @trusted print (c : char) -> void
    putchar (c);

def @{trusted} print (const s : string) -> void {
    let i = 0U;
    while i < s.len {
        print (s [i]);
        i = i + 1U;
    }
}

def @{trusted} print (i : i64) ->  void {
    printf ("%ld".ptr, i);
}

def @{trusted} print (i : i32) ->  void {
    printf ("%d".ptr, i);
}

def @{trusted} print (i : i16) ->  void {
    printf ("%hd".ptr, i);
}

def @{trusted} print (i : i8) ->  void {
    printf ("%hhx".ptr, i);
}

def @{trusted} print (i : u64) ->  void {
    printf ("%lu".ptr, i);
}

def @{trusted} print (i : p!void) ->  void {
    printf ("%lu".ptr, i);
}

def @{trusted} print (T) (i : p!T) ->  void {
    printf ("%lu".ptr, i);
}

def @{trusted} print (i : u32) ->  void {
    printf ("%u".ptr, i);
}

def @{trusted} print (i : u16) ->  void {
    printf ("%hu".ptr, i);
}

def @{trusted} print (i : const u8) -> void {
    printf ("%hhx".ptr, i);
}

def @{trusted} print (a : f32, prec : i64) {
    printf ("%.*lf".ptr, prec, a);
}

def @{trusted} print (a : f64, prec : i64) {
    printf ("%.*lf".ptr, prec, a);
}

def @{trusted} print (f : f32) {
    printf ("%lf".ptr, f);
}

def @{trusted} print (f : f64) {
    printf ("%lf".ptr, f);
}

def @{trusted} print (b : bool) {
    if (b) print ("true");
    else print ("false");
}

def @{trusted} print (a : const [void]) {
    print ("[]");
}

def @{trusted} print (T of [U], const U) (a : const T) {
    let i = 0U;
    print ('[');
    while i < a.len {
        print (a [i]);
        if i < a.len - 1U
            print (", ");
        i = i + 1U;
    }
    print (']');
}

def @{trusted} print (F, T...) (a : const F, b : const T) {
    print (a);
    print (b::expand);    
}

def @{trusted} println (F, T...) (s : const F, i : const T) {
    print (s);
    print (i::expand);
    print ('\n');
}

def @{trusted} println (T) (const i : T) {
    print (i);
    print ('\n');
}

def @{trusted} println if (is (T : tuple)) (T) (const i : T) {
    print (i);
    print ('\n');
}

def @{trusted} print (T) (const tu : t!(const T)) {
    print (tu.0);
}

def @{trusted} print if (is (T : tuple)) (T) (const tu : T) {
    print ('(');
    printTuple (tu);
    print (')');
}

private def @{trusted} printTuple (T) (const tu : t!(const T)) {
    print (tu.0);
}

private def @{trusted} printTuple if (is (T : tuple)) (T) (const tu : T) {
    cte if (tu::arity >= 2) {
        let (a, b...) = tu;
        print (a);
        print (", ");
        printTuple (b);
    }
}

def @{trusted} print if (is (T : struct)) (T) (const a : T) {
    print (a::typeid);
    print ('(');
    printTuple (a.tupleof);
    print (')');
}

def @{trusted} print (T, N : u64) (const a : [const T ; N]) {
    print ('[');
    for it in 0U .. a.len {
        print (a [it]);
        if it < a.len - 1U
            print (", ");
    }
    print (']');
}

def @{trusted} read if (isIntegral!T) (T) () {
    let i = i64::init;
    scanf ("%d".ptr, &i);
    return cast!T (i);
}

def @{trusted} read if (is (T : char)) (T) () {
    let i = char::init;
    scanf ("%c".ptr, &i);
    return i;
}

def @trusted read if (is (T : string) || is (T : [char])) (T) () {
    let res = [char ; new 0U];
    while true {
        let i = char::init;
        scanf ("%c".ptr, &i);
        if (i == '\n' || i == '\r') break;
        else res = res ~ [i];
    }
    return res;
}

def @trusted read if (is (T : string) || is (T : [char])) (T) (end : [char]) {
    let res = [char ; new 0U];
    while true {
        let i = char::init;
        scanf ("%c".ptr, &i);
        for it in end {
            if i == it break;
        }
        res = res ~ [i];
    }
    return res;
}

def @trusted read if (is (T : string) || is (T : [char])) (T) (end : char) {
    let res = [char ; new 0U];
    while true {
        let i = char::init;
        scanf ("%c".ptr, &i);       
        if i == end break;        
        else res = res ~ [i];
    }
    return res;
}



