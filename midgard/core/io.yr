mod core.io;

extern (C) putchar (const c : char);
extern (C) printf (const c : p!char, ...);

def test () {
    let a = [char ; 10U];
}

def print (c : char) -> void
    putchar (c);

def print (const s : string) -> void {
    let i = 0U;
    while i < s.len {
        print (s [i]);
        i = i + 1U;
    }
}

def print (i : long) ->  void {
    printf ("%ld".ptr, i);
}

def print (i : int) ->  void {
    printf ("%d".ptr, i);
}

def print (i : short) ->  void {
    printf ("%hd".ptr, i);
}

def print (i : byte) ->  void {
    printf ("%hhx".ptr, i);
}

def print (i : ulong) ->  void {
    printf ("%lu".ptr, i);
}

def print (i : p!void) ->  void {
    printf ("%lu".ptr, i);
}

def print (T) (i : p!T) ->  void {
    printf ("%lu".ptr, i);
}

def print (i : uint) ->  void {
    printf ("%u".ptr, i);
}

def print (i : ushort) ->  void {
    printf ("%hu".ptr, i);
}

def print (i : const ubyte) -> void {
    printf ("%hhx".ptr, i);
}

def print (a : float, prec : long) {
    printf ("%.*lf".ptr, prec, a);
}

def print (a : double, prec : long) {
    printf ("%.*lf".ptr, prec, a);
}

def print (f : float) {
    printf ("%lf".ptr, f);
}

def print (f : double) {
    printf ("%lf".ptr, f);
}

def print (b : bool) {
    if (b) print ("true");
    else print ("false");
}

def print (T of [U], const U) (a : const T) {
    let i = 0U;
    print ('[');
    while i < a.len {
        print (a [i]);
        if i < a.len - 1U
            print (", ");
        i = i + 1U;
    }
    print (']');
}

def print (F, T...) (a : const F, b : const T) {
    print (a);
    print (b.expand);    
}

def println (F, T...) (s : const F, i : const T) {
    print (s);
    print (i.expand);
    print ('\n');
}

def println (T) (const i : T) {
    print (i);
    print ('\n');
}

def println if (is (T : tuple)) (T) (const i : T) {
    print (i);
    print ('\n');
}

def print (T) (const tu : t!(const T)) {
    print (tu.0);
}

def print if (is (T : tuple)) (T) (const tu : T) {
    print ('(');
    printTuple (tu);
    print (')');
}

private def printTuple (T) (const tu : t!(const T)) {
    print (tu.0);
}

private def printTuple if (is (T : tuple)) (T) (const tu : T) {
    let (a, b...) = tu;
    print (a);
    print (", ");
    printTuple (b);    
}

def print if (is (T : struct)) (T) (const a : T) {
    print (a::typeid);
    print ('(');
    printTuple (a.tupleof);
    print (')');
}

def print (T, N : ulong) (const a : [const T ; N]) {
    print ('[');
    for it in 0U .. a.len {
        print (a [it]);
        if it < a.len - 1U
            print (", ");
    }
    print (']');
}


