mod core.demangle;

import std.outbuffer;
import std.conv;


def demangle (func_name : string) -> p!(const char)
    return demangleFunction (func_name);

def getSize (ref func : string) {
    let i = 0UL;
    while (func [i] >= '0' && func [i] <= '9')
        i++;
    let value = string {i, func.ptr};
    func = string {func.len - i, func.ptr + i};
    return value.to!u32;
}

def demangleFuncPtr (ref func : string) -> string {
    let buf = OutBuffer ();
    if (func [1] == 'D') {
        buf.write ("dg");
        func = string {func.len - 1U, func.ptr + 1U};
    } else {
        buf.write ("fn");
    }

    buf.write (demangleParams (func));
    return buf.to!string ();
}

def demangleArray (ref func : string) -> string {
    // A (size)? A type
    let buf = OutBuffer ();
    buf.write ("[");
    if (func [1] == 'A') { // dynamic array
        func = string {func.len - 2UL, func.ptr + 2UL};
        let inner = demangleType (func);
        buf.write (inner);
    } else {
        func = string {func.len - 1UL, func.ptr + 1UL};
        let size = getSize (func);
        func = string {func.len - 1UL, func.ptr + 1UL};
        let inner = demangleType (func);
        buf.write (inner, " ; ", size.to!(string, "b"));
    }
    buf.write ("]");
    return buf.to!string;
}

def demangleTuple (ref func : string) {
    func = string {func.len - 1UL, func.ptr + 1UL};
    let size = getSize (func);
    func = string {func.len - 1UL, func.ptr + 1UL};
    let buf = OutBuffer ();
    buf.write ("(");
    
    for i in 0U .. size {
        if i != 0 { buf.write (", "); }
        buf.write (demangleType (func));
    }
    buf.write (")");
    return buf.to!string;
}

def demangleSymbol (ref func : string) {
    let end = func [0];
    func = string {func.len - 1U, func.ptr + 1U};
    let name = demangleName (func, end);
    func = string {func.len - 1U, func.ptr + 1U};
    return name;
}

def demanglePointer (ref func : string) {
    let buf = OutBuffer ();
    func = string {func.len - 1U, func.ptr + 1U };
    buf.write ("p!(", demangleType (func), ")");
    return buf.to!string ();
}

def demangleRange (ref func : string) {
    let buf = OutBuffer ();
    if (func [1] == '_') {
        func = string {func.len - 2U, func.ptr + 2U };
        buf.write ("r!(", demangleType (func), ")");
        return buf.to!string ();
    } else {
        func = string {func.len - 1U, func.ptr + 1U };
        buf.write ("ref (", demangleType (func), ")");
        return buf.to!string ();
    }
}

def demangleConst (ref func : string) {
    let buf = OutBuffer ();
    func = string {func.len - 1U, func.ptr + 1U };
    buf.write ("const (", demangleType (func), ")");
    return buf.to!string ();
}

def demangleType (ref func : string) -> string {
    let buf = OutBuffer ();
    match (func [0]) {
        'A' => buf.write (demangleArray (func));
        'T' => buf.write (demangleTuple (func));
        'v' => { buf.write ("void"); func = string {func.len - 1U, func.ptr + 1U }; }
        'b' => { buf.write ("bool"); func = string {func.len - 1U, func.ptr + 1U }; }
        'a' => { buf.write ("char"); func = string {func.len - 1U, func.ptr + 1U }; }
        'g' => { buf.write ("i8");  func = string {func.len - 1U, func.ptr + 1U }; }
        'h' => { buf.write ("u8");  func = string {func.len - 1U, func.ptr + 1U }; }
        's' => { buf.write ("i16"); func = string {func.len - 1U, func.ptr + 1U }; }
        't' => { buf.write ("u16"); func = string {func.len - 1U, func.ptr + 1U }; }
        'i' => { buf.write ("i32"); func = string {func.len - 1U, func.ptr + 1U }; }
        'k' => { buf.write ("u32"); func = string {func.len - 1U, func.ptr + 1U }; }
        'l' => { buf.write ("i64"); func = string {func.len - 1U, func.ptr + 1U }; }
        'm' => { buf.write ("u64"); func = string {func.len - 1U, func.ptr + 1U }; }
        'f' => { buf.write ("f32"); func = string {func.len - 1U, func.ptr + 1U }; }
        'd' => { buf.write ("f64"); func = string {func.len - 1U, func.ptr + 1U }; }
        'E' | 'S' => buf.write (demangleSymbol (func));
        'P' => buf.write (demanglePointer (func));
        'C' => buf.write (demangleFuncPtr (func));
        'R' => buf.write (demangleRange (func));
        'x' => buf.write (demangleConst (func));
        _ => { buf.write (func [0]); func = string {func.len - 1U, func.ptr + 1U }; }
    }
    return buf.to!string;
}

def demangleParams (ref func : string) -> string {
    let buf = OutBuffer ();
    buf.write (" (");
    func = string {func.len - 1U, func.ptr + 1U};
    let z = 0;
    while (func [0] != 'Z') {
        if (z != 0) buf.write (", ");
        buf.write (demangleType (func));
        z += 1;
    }

    func = string {func.len - 1U, func.ptr + 1U};    
    buf.write (") -> ", demangleType (func));
    return buf.to!string;
}

def demangleName (ref func : string, end : char) -> string {
    let buf = OutBuffer ();
    // Until F found
    // _Y4test5innerFiiZv -> test::inner (i32, i32)-> void
    let z = 0;
    while (func [0] != end) {
        if (z != 0) buf.write ("::");
        let size = getSize (func);
        for i in 0U .. size {
            buf.write (func [i]);
        }        
        func = string {func.len - size, func.ptr + size};
        z += 1;
    }
    return buf.to!string ();
}


def demangleFunction (func : string) {
    if (func [0] == '_' && func [1] == 'Y') {
        func = string {func.len - 2U, func.ptr + 2U};
        if (func [0] == 'm')
            return "main\n".ptr;

        let buf = OutBuffer ();
        buf.write (demangleName (func, 'F'));
        buf.write (demangleParams (func));        
        buf.write ("\n");
        
        return buf.to!string ().ptr;
    } else return func.ptr;        
}
