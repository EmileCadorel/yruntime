mod core::duplication;

pub {
    import std::memory;

    trait Copiable {
        def deepCopy (self)-> mut (typeof self);
    }
    
    def deepCopy (T) (a : T) -> mut T {
        return a;
    }

    def deepCopy (T of [U], U) (a : T) -> dmut T {
        let dmut x : dmut [U] = alias allocArray!U (a.len);
        for i in 0u64 .. a.len {
            x[i] = dcopy (a [i]);
        }
        return alias x;
    }
}
